(()=>{"use strict";var t,r={p:"dist/"};(function(t){t[t.POSITION=0]="POSITION",t[t.NORMAL=1]="NORMAL"})(t||(t={}));var n=function(){function t(t){var r=this.constructor;r.staticConstructorCalled||(console.log("Calling static constructor for: "+r.name),r.staticConstructor(t),r.staticConstructorCalled=!0)}return t.staticConstructor=function(t){},t.staticConstructorCalled=!1,t}();function o(t){var r=t.createBuffer();if(!r)throw"Could not create positionBuffer.";return r}function e(t,r,n){var o=t.createShader(r);if(!o)throw"Could not create shader.";if(t.shaderSource(o,n),t.compileShader(o),!t.getShaderParameter(o,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(o)),t.deleteShader(o),"Could not create shader.";return o}function a(t,r,n){var o=e(t,t.VERTEX_SHADER,r),a=e(t,t.FRAGMENT_SHADER,n),i=t.createProgram();if(!i)throw"Could not create program.";if(t.attachShader(i,o),t.attachShader(i,a),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(i)),t.deleteProgram(i),"Could not link program.";return i}function i(t){var r=t.getParameter(t.VIEWPORT);return{bounds:{left:r[0],bottom:r[1],right:r[2],top:r[3]},width:r[2]-r[0],height:r[3]-r[1]}}function s(t){var r=t.canvas;r.width===r.clientWidth&&r.height===r.clientHeight||(r.width=r.clientWidth,r.height=r.clientHeight,t.viewport(0,0,r.width,r.height))}var u=function(){function t(t,r){this.target=t,this.updateFunction=r}return t.prototype.update=function(t,r){this.updateFunction(this.target,t,r)},t}(),c=function(){function t(t,r){this.target=t,this.drawFunction=r}return t.prototype.draw=function(t){this.drawFunction(this.target,t)},t}();const f=function(t,r,n){void 0===r&&(r=[]),void 0===n&&(n=[]),this.camera=t,this.updatables=r,this.drawables=n};var l=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array;function p(){var t=new m(16);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function h(t){var r=new m(16);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15],r}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,r=arguments.length;r--;)t+=arguments[r]*arguments[r];return Math.sqrt(t)});function v(){var t=new m(3);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function d(t){var r=new m(3);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r}function E(t,r,n){return t[0]=r[0]-n[0],t[1]=r[1]-n[1],t[2]=r[2]-n[2],t}function _(t,r){var n=r[0],o=r[1],e=r[2],a=n*n+o*o+e*e;return a>0&&(a=1/Math.sqrt(a)),t[0]=r[0]*a,t[1]=r[1]*a,t[2]=r[2]*a,t}function y(t,r,n){var o=r[0],e=r[1],a=r[2],i=n[0],s=n[1],u=n[2];return t[0]=e*u-a*s,t[1]=a*i-o*u,t[2]=o*s-e*i,t}v();var T,A=(T=function(t,r){return T=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])},T(t,r)},function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}T(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}),w=function(t,r){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,e,a=n.call(t),i=[];try{for(;(void 0===r||r-- >0)&&!(o=a.next()).done;)i.push(o.value)}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}return i},g=function(t,r,n){if(n||2===arguments.length)for(var o,e=0,a=r.length;e<a;e++)!o&&e in r||(o||(o=Array.prototype.slice.call(r,0,e)),o[e]=r[e]);return t.concat(o||Array.prototype.slice.call(r))},R=function(t){function r(r){var n=t.call(this,r)||this;return n.transform=p(),n}return A(r,t),r.prototype.getInverseTransform=function(){var t,r,n,o,e,a,i,s,u,c,f,l,m,h,v,d,E,_,y,T,A,w,g,R,x,U,b,I,B,P,C,M=(t=p(),n=(r=this.transform)[0],o=r[1],e=r[2],a=r[3],i=r[4],s=r[5],u=r[6],c=r[7],f=r[8],l=r[9],m=r[10],h=r[11],v=r[12],d=r[13],E=r[14],(C=(y=n*s-o*i)*(P=m*(_=r[15])-h*E)-(T=n*u-e*i)*(B=l*_-h*d)+(A=n*c-a*i)*(I=l*E-m*d)+(w=o*u-e*s)*(b=f*_-h*v)-(g=o*c-a*s)*(U=f*E-m*v)+(R=e*c-a*u)*(x=f*d-l*v))?(C=1/C,t[0]=(s*P-u*B+c*I)*C,t[1]=(e*B-o*P-a*I)*C,t[2]=(d*R-E*g+_*w)*C,t[3]=(m*g-l*R-h*w)*C,t[4]=(u*b-i*P-c*U)*C,t[5]=(n*P-e*b+a*U)*C,t[6]=(E*A-v*R-_*T)*C,t[7]=(f*R-m*A+h*T)*C,t[8]=(i*B-s*b+c*x)*C,t[9]=(o*b-n*B-a*x)*C,t[10]=(v*g-d*A+_*y)*C,t[11]=(l*A-f*g-h*y)*C,t[12]=(s*U-i*I-u*x)*C,t[13]=(n*I-o*U+e*x)*C,t[14]=(d*T-v*w-E*y)*C,t[15]=(f*w-l*T+m*y)*C,t):null);if(!M)throw"Can't invert transform.";return M},r.prototype.getRight=function(){return d([this.transform[0],this.transform[1],this.transform[2]])},r.prototype.getLeft=function(){return d([-this.transform[0],-this.transform[1],-this.transform[2]])},r.prototype.getUp=function(){return d([this.transform[4],this.transform[5],this.transform[6]])},r.prototype.getDown=function(){return d([-this.transform[4],-this.transform[5],-this.transform[6]])},r.prototype.getForward=function(){return d([this.transform[8],this.transform[9],this.transform[10]])},r.prototype.getBackward=function(){return d([-this.transform[8],-this.transform[9],-this.transform[10]])},r.prototype.translate=function(t){var r,n,o,e,a,i,s,u,c,f,l,m,p,h,v,d,E,_;r=this.transform,n=this.transform,d=(o=t)[0],E=o[1],_=o[2],n===r?(r[12]=n[0]*d+n[4]*E+n[8]*_+n[12],r[13]=n[1]*d+n[5]*E+n[9]*_+n[13],r[14]=n[2]*d+n[6]*E+n[10]*_+n[14],r[15]=n[3]*d+n[7]*E+n[11]*_+n[15]):(e=n[0],a=n[1],i=n[2],s=n[3],u=n[4],c=n[5],f=n[6],l=n[7],m=n[8],p=n[9],h=n[10],v=n[11],r[0]=e,r[1]=a,r[2]=i,r[3]=s,r[4]=u,r[5]=c,r[6]=f,r[7]=l,r[8]=m,r[9]=p,r[10]=h,r[11]=v,r[12]=e*d+u*E+m*_+n[12],r[13]=a*d+c*E+p*_+n[13],r[14]=i*d+f*E+h*_+n[14],r[15]=s*d+l*E+v*_+n[15])},r.prototype.rotateX=function(t){var r,n,o,e,a,i,s,u,c,f,l,m,p;r=this.transform,n=this.transform,o=t,e=Math.sin(o),a=Math.cos(o),i=n[4],s=n[5],u=n[6],c=n[7],f=n[8],l=n[9],m=n[10],p=n[11],n!==r&&(r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15]),r[4]=i*a+f*e,r[5]=s*a+l*e,r[6]=u*a+m*e,r[7]=c*a+p*e,r[8]=f*a-i*e,r[9]=l*a-s*e,r[10]=m*a-u*e,r[11]=p*a-c*e},r.prototype.rotateY=function(t){var r,n,o,e,a,i,s,u,c,f,l,m,p;r=this.transform,n=this.transform,o=t,e=Math.sin(o),a=Math.cos(o),i=n[0],s=n[1],u=n[2],c=n[3],f=n[8],l=n[9],m=n[10],p=n[11],n!==r&&(r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15]),r[0]=i*a-f*e,r[1]=s*a-l*e,r[2]=u*a-m*e,r[3]=c*a-p*e,r[8]=i*e+f*a,r[9]=s*e+l*a,r[10]=u*e+m*a,r[11]=c*e+p*a},r.prototype.rotateZ=function(t){var r,n,o,e,a,i,s,u,c,f,l,m,p;r=this.transform,n=this.transform,o=t,e=Math.sin(o),a=Math.cos(o),i=n[0],s=n[1],u=n[2],c=n[3],f=n[4],l=n[5],m=n[6],p=n[7],n!==r&&(r[8]=n[8],r[9]=n[9],r[10]=n[10],r[11]=n[11],r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15]),r[0]=i*a+f*e,r[1]=s*a+l*e,r[2]=u*a+m*e,r[3]=c*a+p*e,r[4]=f*a-i*e,r[5]=l*a-s*e,r[6]=m*a-u*e,r[7]=p*a-c*e},r.prototype.rotateAxis=function(t,r){!function(t,r,n,o){var e,a,i,s,u,c,f,m,p,h,v,d,E,_,y,T,A,w,g,R,x,U,b,I,B=o[0],P=o[1],C=o[2],M=Math.hypot(B,P,C);M<l||(B*=M=1/M,P*=M,C*=M,e=Math.sin(n),i=1-(a=Math.cos(n)),s=r[0],u=r[1],c=r[2],f=r[3],m=r[4],p=r[5],h=r[6],v=r[7],d=r[8],E=r[9],_=r[10],y=r[11],T=B*B*i+a,A=P*B*i+C*e,w=C*B*i-P*e,g=B*P*i-C*e,R=P*P*i+a,x=C*P*i+B*e,U=B*C*i+P*e,b=P*C*i-B*e,I=C*C*i+a,t[0]=s*T+m*A+d*w,t[1]=u*T+p*A+E*w,t[2]=c*T+h*A+_*w,t[3]=f*T+v*A+y*w,t[4]=s*g+m*R+d*x,t[5]=u*g+p*R+E*x,t[6]=c*g+h*R+_*x,t[7]=f*g+v*R+y*x,t[8]=s*U+m*b+d*I,t[9]=u*U+p*b+E*I,t[10]=c*U+h*b+_*I,t[11]=f*U+v*b+y*I,r!==t&&(t[12]=r[12],t[13]=r[13],t[14]=r[14],t[15]=r[15]))}(this.transform,this.transform,t,r)},r}(n),x=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return A(r,t),r.positionData=new Float32Array([.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5]),r}(function(r){function n(t){return r.call(this,t)||this}return A(n,r),n.staticConstructor=function(r){this.vao=function(t){var r=t.createVertexArray();if(!r)throw"Could not create vertex array object.";return r}(r),r.bindVertexArray(this.vao),this.positionBuffer=o(r),r.bindBuffer(r.ARRAY_BUFFER,this.positionBuffer),r.bufferData(r.ARRAY_BUFFER,this.positionData,r.STATIC_DRAW),r.vertexAttribPointer(t.POSITION,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),r.enableVertexAttribArray(t.POSITION),this.surfaceNormalBuffer=o(r),this.surfaceNormalData=this.computeSurfaceNormals(),r.bindBuffer(r.ARRAY_BUFFER,this.surfaceNormalBuffer),r.bufferData(r.ARRAY_BUFFER,this.surfaceNormalData,r.STATIC_DRAW),r.vertexAttribPointer(t.NORMAL,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),r.enableVertexAttribArray(t.NORMAL),r.vertexAttribDivisor(t.NORMAL,0)},n.computeSurfaceNormals=function(){for(var t=[],r=0;r<this.positionData.length;r+=9){var n=d(Array.from(this.positionData.slice(r,r+3))),o=d(Array.from(this.positionData.slice(r+3,r+6))),e=d(Array.from(this.positionData.slice(r+6,r+9))),a=E(v(),o,n),i=E(v(),e,n),s=_(v(),y(v(),a,i));t.push.apply(t,g(g(g([],w(s),!1),w(s),!1),w(s),!1))}return new Float32Array(t)},n.mode=WebGL2RenderingContext.TRIANGLES,n.attribOptions={size:3,type:WebGL2RenderingContext.FLOAT,normalize:!1,stride:0,offset:0},n}(function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return A(r,t),r.prototype.scale=function(t){var r,n,o,e,a,i;r=this.transform,n=this.transform,e=(o="number"==typeof t?[t,t,t]:t)[0],a=o[1],i=o[2],r[0]=n[0]*e,r[1]=n[1]*e,r[2]=n[2]*e,r[3]=n[3]*e,r[4]=n[4]*a,r[5]=n[5]*a,r[6]=n[6]*a,r[7]=n[7]*a,r[8]=n[8]*i,r[9]=n[9]*i,r[10]=n[10]*i,r[11]=n[11]*i,r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15]},r}(R))),U=function(){function t(){}return t.RIGHT=d([1,0,0]),t.LEFT=d([-1,0,0]),t.UP=d([0,1,0]),t.DOWN=d([0,-1,0]),t.FORWARD=d([0,0,1]),t.BACKWARD=d([0,0,-1]),t}(),b=function(){var t=function(r,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])},t(r,n)};return function(r,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=r}t(r,n),r.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const I=function(t){function r(r,n,o,e,a){var i=t.call(this,r)||this;return i.yFov=n,i.aspect=o,i.near=e,i.far=a,i.projection=function(t,r,n,o,e){var a,i=1/Math.tan(r/2);return t[0]=i/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=e&&e!==1/0?(a=1/(o-e),t[10]=(e+o)*a,t[14]=2*e*o*a):(t[10]=-1,t[14]=-2*o),t}(p(),n,o,e,a),i.transformMemoizedValue=h(i.transform),i.inverseTransformMemoizedValue=i.getInverseTransform(),i}return b(r,t),r.prototype.getDirection=function(){return this.getBackward()},r.prototype.getWorldToView=function(){var t,r;return t=this.transform,r=this.transformMemoizedValue,(t[0]!==r[0]||t[1]!==r[1]||t[2]!==r[2]||t[3]!==r[3]||t[4]!==r[4]||t[5]!==r[5]||t[6]!==r[6]||t[7]!==r[7]||t[8]!==r[8]||t[9]!==r[9]||t[10]!==r[10]||t[11]!==r[11]||t[12]!==r[12]||t[13]!==r[13]||t[14]!==r[14]||t[15]!==r[15])&&(this.transformMemoizedValue=h(this.transform),this.inverseTransformMemoizedValue=this.getInverseTransform()),h(this.inverseTransformMemoizedValue)},r.prototype.getSkyboxWorldToView=function(){var t=this.getWorldToView();return t[12]=0,t[13]=0,t[14]=0,t},r}(R);function B(t){var r=new m(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r}var P;P=new m(4),m!=Float32Array&&(P[0]=0,P[1]=0,P[2]=0,P[3]=0);const C=function(){function t(){}return t.drawFunction=function(t,r,n){return function(o,e){var a=o.constructor;e.useProgram(r),e.bindVertexArray(a.vao);var i=e.getUniformLocation(r,"u_modelToWorld"),s=e.getUniformLocation(r,"u_worldToView"),u=e.getUniformLocation(r,"u_viewToClip");e.uniformMatrix4fv(i,!1,o.transform),e.uniformMatrix4fv(s,!1,t.getWorldToView()),e.uniformMatrix4fv(u,!1,t.projection);var c=e.getUniformLocation(r,"u_color");e.uniform4fv(c,n),e.drawArrays(a.mode,0,a.positionData.length/3)}},t.drawSkyboxFunction=function(t,r){return function(n,o){o.depthMask(!1);var e=n.constructor;o.useProgram(r),o.bindVertexArray(e.vao);var a=o.getUniformLocation(r,"u_worldToView"),i=o.getUniformLocation(r,"u_viewToClip");o.uniformMatrix4fv(a,!1,t.getSkyboxWorldToView()),o.uniformMatrix4fv(i,!1,t.projection),o.drawArrays(e.mode,0,e.positionData.length/3),o.depthMask(!0)}},t}(),M=r.p+"assets/skybox/right.jpg",S=r.p+"assets/skybox/left.jpg",D=r.p+"assets/skybox/top.jpg",O=r.p+"assets/skybox/bottom.jpg",N=r.p+"assets/skybox/back.jpg",G=r.p+"assets/skybox/front.jpg";var L=function(t,r,n){if(n||2===arguments.length)for(var o,e=0,a=r.length;e<a;e++)!o&&e in r||(o||(o=Array.prototype.slice.call(r,0,e)),o[e]=r[e]);return t.concat(o||Array.prototype.slice.call(r))},F=function(){function t(){}return t.ROAD=B([128,64,128,255].map((function(t){return t/255}))),t.SIDEWALK=B([244,35,232,255].map((function(t){return t/255}))),t.BUILDING=B([70,70,70,255].map((function(t){return t/255}))),t.CAR=B([0,0,142,255].map((function(t){return t/255}))),t.VEGETATION=B([107,142,35,255].map((function(t){return t/255}))),t.SKY=B([70,130,180,255].map((function(t){return t/255}))),t}();function X(t){t.clearColor(F.SKY[0],F.SKY[1],F.SKY[2],F.SKY[3]);var r=a(t,"#version 300 es\n\nlayout (location = 0) in vec4 a_position;\nlayout (location = 1) in vec3 a_normal;\n\nuniform mat4 u_modelToWorld;\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_normal;\n\nvoid main() {\n    v_normal = a_normal;\n    gl_Position = u_viewToClip * u_worldToView * u_modelToWorld * a_position;\n}","#version 300 es\n\nprecision mediump float;\n\nin vec3 v_normal;\n\nuniform vec4 u_color;\n\nout vec4 o_color;\n\nvec3 lightDir = normalize(vec3(3, -1, 4));\n\nvoid main() {\n//    o_color = vec4(v_normal/2.0+0.5, 1.0);\n    float intensity = -dot(v_normal, lightDir) / 6.0 + 5.0 / 6.0;\n    o_color = u_color * vec4(intensity, intensity, intensity, 1.0);\n}"),n=a(t,"#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_texCoord;\n\nmat4 negate = mat4(-1);\n\nvoid main()\n{\n    vec4 a_position = negate * a_position;\n    vec4 clipSpace = u_viewToClip * u_worldToView * a_position;\n\n    v_texCoord = a_position.xyz;\n    gl_Position = clipSpace.xyww;\n}","#version 300 es\n\nprecision mediump float;\n\nin vec3 v_texCoord;\n\nuniform samplerCube u_skybox;\n\nout vec4 o_color;\n\nvoid main()\n{\n    o_color = texture(u_skybox, v_texCoord);\n}"),o=t.getUniformLocation(n,"u_skybox");t.useProgram(n),t.uniform1i(o,0);var e=i(t),s=new I(t,Math.PI/2,e.width/e.height,.1,128);s.translate([0,8,0]),s.rotateX(-Math.PI/4);var m=function(t,r){var n=i(t),o=r.yFov*r.aspect/n.width,e=r.yFov/n.height;return new u(r,(function(t,r,n){var a=0,i=0;n.mouse.pressed&&0===n.mouse.button&&(a=n.mouse.movement.x*o,i=n.mouse.movement.y*e),t.rotateX(2*-i);var s=t.transform[12],u=t.transform[13],c=t.transform[14];t.transform[12]=0,t.transform[13]=0,t.transform[14]=0;var f,m,h,v,d,E,_,y,T,A,w=(f=p(),m=2*-a,_=(h=U.UP)[0],y=h[1],T=h[2],(A=Math.hypot(_,y,T))<l?null:(_*=A=1/A,y*=A,T*=A,v=Math.sin(m),E=1-(d=Math.cos(m)),f[0]=_*_*E+d,f[1]=y*_*E+T*v,f[2]=T*_*E-y*v,f[3]=0,f[4]=_*y*E-T*v,f[5]=y*y*E+d,f[6]=T*y*E+_*v,f[7]=0,f[8]=_*T*E+y*v,f[9]=y*T*E-_*v,f[10]=T*T*E+d,f[11]=0,f[12]=0,f[13]=0,f[14]=0,f[15]=1,f));(function(t,r,n){var o=r[0],e=r[1],a=r[2],i=r[3],s=r[4],u=r[5],c=r[6],f=r[7],l=r[8],m=r[9],p=r[10],h=r[11],v=r[12],d=r[13],E=r[14],_=r[15],y=n[0],T=n[1],A=n[2],w=n[3];t[0]=y*o+T*s+A*l+w*v,t[1]=y*e+T*u+A*m+w*d,t[2]=y*a+T*c+A*p+w*E,t[3]=y*i+T*f+A*h+w*_,y=n[4],T=n[5],A=n[6],w=n[7],t[4]=y*o+T*s+A*l+w*v,t[5]=y*e+T*u+A*m+w*d,t[6]=y*a+T*c+A*p+w*E,t[7]=y*i+T*f+A*h+w*_,y=n[8],T=n[9],A=n[10],w=n[11],t[8]=y*o+T*s+A*l+w*v,t[9]=y*e+T*u+A*m+w*d,t[10]=y*a+T*c+A*p+w*E,t[11]=y*i+T*f+A*h+w*_,y=n[12],T=n[13],A=n[14],w=n[15],t[12]=y*o+T*s+A*l+w*v,t[13]=y*e+T*u+A*m+w*d,t[14]=y*a+T*c+A*p+w*E,t[15]=y*i+T*f+A*h+w*_})(t.transform,w,t.transform),t.transform[12]=s,t.transform[13]=u,t.transform[14]=c,n.keys.w&&t.translate([0,0,-r]),n.keys.a&&t.translate([-r,0,0]),n.keys.s&&t.translate([0,0,r]),n.keys.d&&t.translate([r,0,0])}))}(t,s),h=function(t,r,n,o,e,a,i,s){var u=C.drawFunction(i,s,F.ROAD),f=C.drawFunction(i,s,F.BUILDING),l=C.drawFunction(i,s,F.SIDEWALK),m=1.5,p={x:0,z:0},h=[],v=new x(t);v.scale([608,1,608]),v.translate([0,-.5,0]),h.push(new c(v,u));for(var d=0;d<8;d++)for(var E=0;E<8;E++){p.x=5*d-17.5,p.z=5*E-17.5;var _=new x(t);_.translate([p.x,2.5,p.z]),_.scale([3,5,3]),h.push(new c(_,f))}var y=.25,T=.125,A=.05;for(d=0;d<8;d++)for(E=0;E<8;E++){p.x=5*d-17.5,p.z=5*E-17.5;var w=void 0,g=void 0;w=p.x+m+T,g=p.z;var R=new x(t);R.translate([w,.025,g]),R.scale([y,A,3.5]),h.push(new c(R,l)),w=p.x-m-T,g=p.z;var U=new x(t);U.translate([w,.025,g]),U.scale([y,A,3.5]),h.push(new c(U,l)),w=p.x,g=p.z+m+T;var b=new x(t);b.translate([w,.025,g]),b.scale([3,A,y]),h.push(new c(b,l)),w=p.x,g=p.z-m-T;var I=new x(t);I.translate([w,.025,g]),I.scale([3,A,y]),h.push(new c(I,l))}return h}(t,0,0,0,0,0,s,r),v=new x(t),d=C.drawFunction(s,r,F.VEGETATION),E=new x(t),_=C.drawSkyboxFunction(s,n),y=new c(E,_),T=new f(s,[m],L(L([new c(v,d)],function(t,r){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,e,a=n.call(t),i=[];try{for(;(void 0===r||r-- >0)&&!(o=a.next()).done;)i.push(o.value)}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(e)throw e.error}}return i}(h),!1),[y],!1)),A=function(t){var r=t.createTexture();if(!r)throw"Could not create texture.";return r}(t);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,0,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255]));var w=new Image;w.src=M,w.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,w)}));var g=new Image;g.src=S,g.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,g)}));var R=new Image;R.src=D,R.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,R)}));var b=new Image;b.src=O,b.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,b)}));var B=new Image;B.src=N,B.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,B)}));var P=new Image;return P.src=G,P.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,A),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,P)})),T}var V=function(t){var r="function"==typeof Symbol&&Symbol.iterator,n=r&&t[r],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};document.addEventListener("DOMContentLoaded",(function(){!function(){var t=document.getElementById("canvas");t.focus();var r=function(t){var r={mouse:{pressed:!1,button:0,buttons:0,lastPosition:{x:0,y:0},position:{x:0,y:0},movement:{x:0,y:0}},keys:{w:!1,a:!1,s:!1,d:!1}};return t.addEventListener("mousedown",(function(t){r.mouse.pressed=!0,r.mouse.button=t.button,r.mouse.buttons=t.buttons,r.mouse.position.x=t.offsetX,r.mouse.position.y=t.offsetY})),t.addEventListener("mouseup",(function(t){r.mouse.pressed=!1,r.mouse.button=t.button,r.mouse.buttons=t.buttons,r.mouse.position.x=t.offsetX,r.mouse.position.y=t.offsetY})),t.addEventListener("mousemove",(function(t){r.mouse.position.x=t.offsetX,r.mouse.position.y=t.offsetY})),t.addEventListener("mouseenter",(function(){t.focus()})),t.addEventListener("keydown",(function(t){r.keys[t.key]=!0})),t.addEventListener("keyup",(function(t){r.keys[t.key]=!1})),r}(t),n=function(t){var r=t.getContext("webgl2");if(!r)throw"Could not create context.";return r}(t);s(n),new window.ResizeObserver((function(){s(n)})).observe(t),n.enable(n.CULL_FACE),n.cullFace(n.BACK),n.enable(n.DEPTH_TEST),n.depthFunc(n.LEQUAL),n.clearColor(0,0,0,1);var o=X(n);!function(t,r,n){var o=performance.now();requestAnimationFrame((function e(a){var i=.001*(a-o);n.mouse.movement.x=n.mouse.position.x-n.mouse.lastPosition.x,n.mouse.movement.y=n.mouse.position.y-n.mouse.lastPosition.y,function(t,r,n){var o,e;try{for(var a=V(n.updatables),i=a.next();!i.done;i=a.next())i.value.update(t,r)}catch(t){o={error:t}}finally{try{i&&!i.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}}(i,n,r),function(t,r,n){var o,e;r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT);try{for(var a=V(n.drawables),i=a.next();!i.done;i=a.next())i.value.draw(r)}catch(t){o={error:t}}finally{try{i&&!i.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}}(0,t,r),n.mouse.lastPosition.x=n.mouse.position.x,n.mouse.lastPosition.y=n.mouse.position.y,o=a,requestAnimationFrame(e)}))}(n,o,r)}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,