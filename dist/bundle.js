!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=6)}([function(t,n){t.exports="dist/assets/skybox/right.jpg"},function(t,n){t.exports="dist/assets/skybox/left.jpg"},function(t,n){t.exports="dist/assets/skybox/top.jpg"},function(t,n){t.exports="dist/assets/skybox/bottom.jpg"},function(t,n){t.exports="dist/assets/skybox/back.jpg"},function(t,n){t.exports="dist/assets/skybox/front.jpg"},function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"create",(function(){return w})),r.d(e,"clone",(function(){return x})),r.d(e,"copy",(function(){return A})),r.d(e,"fromValues",(function(){return g})),r.d(e,"set",(function(){return R})),r.d(e,"identity",(function(){return U})),r.d(e,"transpose",(function(){return I})),r.d(e,"invert",(function(){return P})),r.d(e,"adjoint",(function(){return B})),r.d(e,"determinant",(function(){return S})),r.d(e,"multiply",(function(){return C})),r.d(e,"translate",(function(){return D})),r.d(e,"scale",(function(){return O})),r.d(e,"rotate",(function(){return L})),r.d(e,"rotateX",(function(){return N})),r.d(e,"rotateY",(function(){return G})),r.d(e,"rotateZ",(function(){return X})),r.d(e,"fromTranslation",(function(){return F})),r.d(e,"fromScaling",(function(){return V})),r.d(e,"fromRotation",(function(){return q})),r.d(e,"fromXRotation",(function(){return Y})),r.d(e,"fromYRotation",(function(){return k})),r.d(e,"fromZRotation",(function(){return z})),r.d(e,"fromRotationTranslation",(function(){return j})),r.d(e,"getTranslation",(function(){return W})),r.d(e,"getScaling",(function(){return K})),r.d(e,"getRotation",(function(){return Z})),r.d(e,"fromRotationTranslationScale",(function(){return H})),r.d(e,"fromRotationTranslationScaleOrigin",(function(){return Q})),r.d(e,"fromQuat",(function(){return J})),r.d(e,"frustum",(function(){return $})),r.d(e,"perspective",(function(){return tt})),r.d(e,"perspectiveFromFieldOfView",(function(){return nt})),r.d(e,"ortho",(function(){return rt})),r.d(e,"lookAt",(function(){return et})),r.d(e,"targetTo",(function(){return ot})),r.d(e,"str",(function(){return at})),r.d(e,"frob",(function(){return ut})),r.d(e,"add",(function(){return it})),r.d(e,"subtract",(function(){return ct})),r.d(e,"multiplyScalar",(function(){return st})),r.d(e,"multiplyScalarAndAdd",(function(){return ft})),r.d(e,"exactEquals",(function(){return lt})),r.d(e,"equals",(function(){return ht})),r.d(e,"mul",(function(){return dt})),r.d(e,"sub",(function(){return mt}));var o={};r.r(o),r.d(o,"create",(function(){return Mt})),r.d(o,"clone",(function(){return pt})),r.d(o,"length",(function(){return vt})),r.d(o,"fromValues",(function(){return bt})),r.d(o,"copy",(function(){return _t})),r.d(o,"set",(function(){return Et})),r.d(o,"add",(function(){return Tt})),r.d(o,"subtract",(function(){return yt})),r.d(o,"multiply",(function(){return wt})),r.d(o,"divide",(function(){return xt})),r.d(o,"ceil",(function(){return At})),r.d(o,"floor",(function(){return gt})),r.d(o,"min",(function(){return Rt})),r.d(o,"max",(function(){return Ut})),r.d(o,"round",(function(){return It})),r.d(o,"scale",(function(){return Pt})),r.d(o,"scaleAndAdd",(function(){return Bt})),r.d(o,"distance",(function(){return St})),r.d(o,"squaredDistance",(function(){return Ct})),r.d(o,"squaredLength",(function(){return Dt})),r.d(o,"negate",(function(){return Ot})),r.d(o,"inverse",(function(){return Lt})),r.d(o,"normalize",(function(){return Nt})),r.d(o,"dot",(function(){return Gt})),r.d(o,"cross",(function(){return Xt})),r.d(o,"lerp",(function(){return Ft})),r.d(o,"hermite",(function(){return Vt})),r.d(o,"bezier",(function(){return qt})),r.d(o,"random",(function(){return Yt})),r.d(o,"transformMat4",(function(){return kt})),r.d(o,"transformMat3",(function(){return zt})),r.d(o,"transformQuat",(function(){return jt})),r.d(o,"rotateX",(function(){return Wt})),r.d(o,"rotateY",(function(){return Kt})),r.d(o,"rotateZ",(function(){return Zt})),r.d(o,"angle",(function(){return Ht})),r.d(o,"str",(function(){return Qt})),r.d(o,"exactEquals",(function(){return Jt})),r.d(o,"equals",(function(){return $t})),r.d(o,"sub",(function(){return tn})),r.d(o,"mul",(function(){return nn})),r.d(o,"div",(function(){return rn})),r.d(o,"dist",(function(){return en})),r.d(o,"sqrDist",(function(){return on})),r.d(o,"len",(function(){return an})),r.d(o,"sqrLen",(function(){return un})),r.d(o,"forEach",(function(){return cn}));var a,u={};r.r(u),r.d(u,"create",(function(){return sn})),r.d(u,"clone",(function(){return fn})),r.d(u,"fromValues",(function(){return ln})),r.d(u,"copy",(function(){return hn})),r.d(u,"set",(function(){return dn})),r.d(u,"add",(function(){return mn})),r.d(u,"subtract",(function(){return Mn})),r.d(u,"multiply",(function(){return pn})),r.d(u,"divide",(function(){return vn})),r.d(u,"ceil",(function(){return bn})),r.d(u,"floor",(function(){return _n})),r.d(u,"min",(function(){return En})),r.d(u,"max",(function(){return Tn})),r.d(u,"round",(function(){return yn})),r.d(u,"scale",(function(){return wn})),r.d(u,"scaleAndAdd",(function(){return xn})),r.d(u,"distance",(function(){return An})),r.d(u,"squaredDistance",(function(){return gn})),r.d(u,"length",(function(){return Rn})),r.d(u,"squaredLength",(function(){return Un})),r.d(u,"negate",(function(){return In})),r.d(u,"inverse",(function(){return Pn})),r.d(u,"normalize",(function(){return Bn})),r.d(u,"dot",(function(){return Sn})),r.d(u,"lerp",(function(){return Cn})),r.d(u,"random",(function(){return Dn})),r.d(u,"transformMat4",(function(){return On})),r.d(u,"transformQuat",(function(){return Ln})),r.d(u,"str",(function(){return Nn})),r.d(u,"exactEquals",(function(){return Gn})),r.d(u,"equals",(function(){return Xn})),r.d(u,"sub",(function(){return Fn})),r.d(u,"mul",(function(){return Vn})),r.d(u,"div",(function(){return qn})),r.d(u,"dist",(function(){return Yn})),r.d(u,"sqrDist",(function(){return kn})),r.d(u,"len",(function(){return zn})),r.d(u,"sqrLen",(function(){return jn})),r.d(u,"forEach",(function(){return Wn})),function(t){t[t.POSITION=0]="POSITION",t[t.NORMAL=1]="NORMAL"}(a||(a={}));var i=function(){function t(t){var n=this.constructor;n.staticConstructorCalled||(console.log("Calling static constructor for: "+n.name),n.staticConstructor(t),n.staticConstructorCalled=!0)}return t.staticConstructor=function(t){},t.staticConstructorCalled=!1,t}();function c(t){var n=t.createBuffer();if(!n)throw"Could not create positionBuffer.";return n}function s(t,n,r){var e=t.createShader(n);if(!e)throw"Could not create shader.";if(t.shaderSource(e,r),t.compileShader(e),!t.getShaderParameter(e,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(e)),t.deleteShader(e),"Could not create shader.";return e}function f(t,n,r){var e=s(t,t.VERTEX_SHADER,n),o=s(t,t.FRAGMENT_SHADER,r),a=t.createProgram();if(!a)throw"Could not create program.";if(t.attachShader(a,e),t.attachShader(a,o),t.linkProgram(a),!t.getProgramParameter(a,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(a)),t.deleteProgram(a),"Could not link program.";return a}function l(t){var n=t.getParameter(t.VIEWPORT);return{bounds:{left:n[0],bottom:n[1],right:n[2],top:n[3]},width:n[2]-n[0],height:n[3]-n[1]}}function h(t){var n=t.canvas;n.width===n.clientWidth&&n.height===n.clientHeight||(n.width=n.clientWidth,n.height=n.clientHeight,t.viewport(0,0,n.width,n.height))}var d=function(){function t(t,n){this.target=t,this.updateFunction=n}return t.prototype.update=function(t,n){this.updateFunction(this.target,t,n)},t}(),m=function(){function t(t,n){this.target=t,this.drawFunction=n}return t.prototype.draw=function(t){this.drawFunction(this.target,t)},t}(),M=function(t,n,r){void 0===n&&(n=[]),void 0===r&&(r=[]),this.camera=t,this.updatables=n,this.drawables=r},p="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\nlayout (location = 1) in vec3 a_normal;\n\nuniform mat4 u_modelToWorld;\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_normal;\n\nvoid main() {\n    v_normal = a_normal;\n    gl_Position = u_viewToClip * u_worldToView * u_modelToWorld * a_position;\n}",v="#version 300 es\n\nprecision mediump float;\n\nin vec3 v_normal;\n\nuniform vec4 u_color;\n\nout vec4 o_color;\n\nvec3 lightDir = normalize(vec3(3, -1, 4));\n\nvoid main() {\n//    o_color = vec4(v_normal/2.0+0.5, 1.0);\n    float intensity = -dot(v_normal, lightDir) / 6.0 + 5.0 / 6.0;\n    o_color = u_color * vec4(intensity, intensity, intensity, 1.0);\n}",b="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_texCoord;\n\nmat4 negate = mat4(-1);\n\nvoid main()\n{\n    vec4 a_position = negate * a_position;\n    vec4 clipSpace = u_viewToClip * u_worldToView * a_position;\n\n    v_texCoord = a_position.xyz;\n    gl_Position = clipSpace.xyww;\n}",_="#version 300 es\n\nprecision mediump float;\n\nin vec3 v_texCoord;\n\nuniform samplerCube u_skybox;\n\nout vec4 o_color;\n\nvoid main()\n{\n    o_color = texture(u_skybox, v_texCoord);\n}";const E=1e-6;let T="undefined"!=typeof Float32Array?Float32Array:Array;const y=Math.random;Math.PI;function w(){let t=new T(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function x(t){let n=new T(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function A(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function g(t,n,r,e,o,a,u,i,c,s,f,l,h,d,m,M){let p=new T(16);return p[0]=t,p[1]=n,p[2]=r,p[3]=e,p[4]=o,p[5]=a,p[6]=u,p[7]=i,p[8]=c,p[9]=s,p[10]=f,p[11]=l,p[12]=h,p[13]=d,p[14]=m,p[15]=M,p}function R(t,n,r,e,o,a,u,i,c,s,f,l,h,d,m,M,p){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t[4]=a,t[5]=u,t[6]=i,t[7]=c,t[8]=s,t[9]=f,t[10]=l,t[11]=h,t[12]=d,t[13]=m,t[14]=M,t[15]=p,t}function U(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function I(t,n){if(t===n){let r=n[1],e=n[2],o=n[3],a=n[6],u=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=a,t[11]=n[14],t[12]=o,t[13]=u,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function P(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],p=n[14],v=n[15],b=r*i-e*u,_=r*c-o*u,E=r*s-a*u,T=e*c-o*i,y=e*s-a*i,w=o*s-a*c,x=f*M-l*m,A=f*p-h*m,g=f*v-d*m,R=l*p-h*M,U=l*v-d*M,I=h*v-d*p,P=b*I-_*U+E*R+T*g-y*A+w*x;return P?(P=1/P,t[0]=(i*I-c*U+s*R)*P,t[1]=(o*U-e*I-a*R)*P,t[2]=(M*w-p*y+v*T)*P,t[3]=(h*y-l*w-d*T)*P,t[4]=(c*g-u*I-s*A)*P,t[5]=(r*I-o*g+a*A)*P,t[6]=(p*E-m*w-v*_)*P,t[7]=(f*w-h*E+d*_)*P,t[8]=(u*U-i*g+s*x)*P,t[9]=(e*g-r*U-a*x)*P,t[10]=(m*y-M*E+v*b)*P,t[11]=(l*E-f*y-d*b)*P,t[12]=(i*A-u*R-c*x)*P,t[13]=(r*R-e*A+o*x)*P,t[14]=(M*_-m*T-p*b)*P,t[15]=(f*T-l*_+h*b)*P,t):null}function B(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],p=n[14],v=n[15];return t[0]=i*(h*v-d*p)-l*(c*v-s*p)+M*(c*d-s*h),t[1]=-(e*(h*v-d*p)-l*(o*v-a*p)+M*(o*d-a*h)),t[2]=e*(c*v-s*p)-i*(o*v-a*p)+M*(o*s-a*c),t[3]=-(e*(c*d-s*h)-i*(o*d-a*h)+l*(o*s-a*c)),t[4]=-(u*(h*v-d*p)-f*(c*v-s*p)+m*(c*d-s*h)),t[5]=r*(h*v-d*p)-f*(o*v-a*p)+m*(o*d-a*h),t[6]=-(r*(c*v-s*p)-u*(o*v-a*p)+m*(o*s-a*c)),t[7]=r*(c*d-s*h)-u*(o*d-a*h)+f*(o*s-a*c),t[8]=u*(l*v-d*M)-f*(i*v-s*M)+m*(i*d-s*l),t[9]=-(r*(l*v-d*M)-f*(e*v-a*M)+m*(e*d-a*l)),t[10]=r*(i*v-s*M)-u*(e*v-a*M)+m*(e*s-a*i),t[11]=-(r*(i*d-s*l)-u*(e*d-a*l)+f*(e*s-a*i)),t[12]=-(u*(l*p-h*M)-f*(i*p-c*M)+m*(i*h-c*l)),t[13]=r*(l*p-h*M)-f*(e*p-o*M)+m*(e*h-o*l),t[14]=-(r*(i*p-c*M)-u*(e*p-o*M)+m*(e*c-o*i)),t[15]=r*(i*h-c*l)-u*(e*h-o*l)+f*(e*c-o*i),t}function S(t){let n=t[0],r=t[1],e=t[2],o=t[3],a=t[4],u=t[5],i=t[6],c=t[7],s=t[8],f=t[9],l=t[10],h=t[11],d=t[12],m=t[13],M=t[14],p=t[15];return(n*u-r*a)*(l*p-h*M)-(n*i-e*a)*(f*p-h*m)+(n*c-o*a)*(f*M-l*m)+(r*i-e*u)*(s*p-h*d)-(r*c-o*u)*(s*M-l*d)+(e*c-o*i)*(s*m-f*d)}function C(t,n,r){let e=n[0],o=n[1],a=n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=n[9],d=n[10],m=n[11],M=n[12],p=n[13],v=n[14],b=n[15],_=r[0],E=r[1],T=r[2],y=r[3];return t[0]=_*e+E*i+T*l+y*M,t[1]=_*o+E*c+T*h+y*p,t[2]=_*a+E*s+T*d+y*v,t[3]=_*u+E*f+T*m+y*b,_=r[4],E=r[5],T=r[6],y=r[7],t[4]=_*e+E*i+T*l+y*M,t[5]=_*o+E*c+T*h+y*p,t[6]=_*a+E*s+T*d+y*v,t[7]=_*u+E*f+T*m+y*b,_=r[8],E=r[9],T=r[10],y=r[11],t[8]=_*e+E*i+T*l+y*M,t[9]=_*o+E*c+T*h+y*p,t[10]=_*a+E*s+T*d+y*v,t[11]=_*u+E*f+T*m+y*b,_=r[12],E=r[13],T=r[14],y=r[15],t[12]=_*e+E*i+T*l+y*M,t[13]=_*o+E*c+T*h+y*p,t[14]=_*a+E*s+T*d+y*v,t[15]=_*u+E*f+T*m+y*b,t}function D(t,n,r){let e,o,a,u,i,c,s,f,l,h,d,m,M=r[0],p=r[1],v=r[2];return n===t?(t[12]=n[0]*M+n[4]*p+n[8]*v+n[12],t[13]=n[1]*M+n[5]*p+n[9]*v+n[13],t[14]=n[2]*M+n[6]*p+n[10]*v+n[14],t[15]=n[3]*M+n[7]*p+n[11]*v+n[15]):(e=n[0],o=n[1],a=n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=n[9],d=n[10],m=n[11],t[0]=e,t[1]=o,t[2]=a,t[3]=u,t[4]=i,t[5]=c,t[6]=s,t[7]=f,t[8]=l,t[9]=h,t[10]=d,t[11]=m,t[12]=e*M+i*p+l*v+n[12],t[13]=o*M+c*p+h*v+n[13],t[14]=a*M+s*p+d*v+n[14],t[15]=u*M+f*p+m*v+n[15]),t}function O(t,n,r){let e=r[0],o=r[1],a=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=n[7]*o,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=n[11]*a,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function L(t,n,r,e){let o,a,u,i,c,s,f,l,h,d,m,M,p,v,b,_,T,y,w,x,A,g,R,U,I=e[0],P=e[1],B=e[2],S=Math.sqrt(I*I+P*P+B*B);return Math.abs(S)<E?null:(I*=S=1/S,P*=S,B*=S,o=Math.sin(r),u=1-(a=Math.cos(r)),i=n[0],c=n[1],s=n[2],f=n[3],l=n[4],h=n[5],d=n[6],m=n[7],M=n[8],p=n[9],v=n[10],b=n[11],_=I*I*u+a,T=P*I*u+B*o,y=B*I*u-P*o,w=I*P*u-B*o,x=P*P*u+a,A=B*P*u+I*o,g=I*B*u+P*o,R=P*B*u-I*o,U=B*B*u+a,t[0]=i*_+l*T+M*y,t[1]=c*_+h*T+p*y,t[2]=s*_+d*T+v*y,t[3]=f*_+m*T+b*y,t[4]=i*w+l*x+M*A,t[5]=c*w+h*x+p*A,t[6]=s*w+d*x+v*A,t[7]=f*w+m*x+b*A,t[8]=i*g+l*R+M*U,t[9]=c*g+h*R+p*U,t[10]=s*g+d*R+v*U,t[11]=f*g+m*R+b*U,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function N(t,n,r){let e=Math.sin(r),o=Math.cos(r),a=n[4],u=n[5],i=n[6],c=n[7],s=n[8],f=n[9],l=n[10],h=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=a*o+s*e,t[5]=u*o+f*e,t[6]=i*o+l*e,t[7]=c*o+h*e,t[8]=s*o-a*e,t[9]=f*o-u*e,t[10]=l*o-i*e,t[11]=h*o-c*e,t}function G(t,n,r){let e=Math.sin(r),o=Math.cos(r),a=n[0],u=n[1],i=n[2],c=n[3],s=n[8],f=n[9],l=n[10],h=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*o-s*e,t[1]=u*o-f*e,t[2]=i*o-l*e,t[3]=c*o-h*e,t[8]=a*e+s*o,t[9]=u*e+f*o,t[10]=i*e+l*o,t[11]=c*e+h*o,t}function X(t,n,r){let e=Math.sin(r),o=Math.cos(r),a=n[0],u=n[1],i=n[2],c=n[3],s=n[4],f=n[5],l=n[6],h=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*o+s*e,t[1]=u*o+f*e,t[2]=i*o+l*e,t[3]=c*o+h*e,t[4]=s*o-a*e,t[5]=f*o-u*e,t[6]=l*o-i*e,t[7]=h*o-c*e,t}function F(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function V(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function q(t,n,r){let e,o,a,u=r[0],i=r[1],c=r[2],s=Math.sqrt(u*u+i*i+c*c);return Math.abs(s)<E?null:(u*=s=1/s,i*=s,c*=s,e=Math.sin(n),a=1-(o=Math.cos(n)),t[0]=u*u*a+o,t[1]=i*u*a+c*e,t[2]=c*u*a-i*e,t[3]=0,t[4]=u*i*a-c*e,t[5]=i*i*a+o,t[6]=c*i*a+u*e,t[7]=0,t[8]=u*c*a+i*e,t[9]=i*c*a-u*e,t[10]=c*c*a+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function Y(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function z(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function j(t,n,r){let e=n[0],o=n[1],a=n[2],u=n[3],i=e+e,c=o+o,s=a+a,f=e*i,l=e*c,h=e*s,d=o*c,m=o*s,M=a*s,p=u*i,v=u*c,b=u*s;return t[0]=1-(d+M),t[1]=l+b,t[2]=h-v,t[3]=0,t[4]=l-b,t[5]=1-(f+M),t[6]=m+p,t[7]=0,t[8]=h+v,t[9]=m-p,t[10]=1-(f+d),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function W(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function K(t,n){let r=n[0],e=n[1],o=n[2],a=n[4],u=n[5],i=n[6],c=n[8],s=n[9],f=n[10];return t[0]=Math.sqrt(r*r+e*e+o*o),t[1]=Math.sqrt(a*a+u*u+i*i),t[2]=Math.sqrt(c*c+s*s+f*f),t}function Z(t,n){let r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function H(t,n,r,e){let o=n[0],a=n[1],u=n[2],i=n[3],c=o+o,s=a+a,f=u+u,l=o*c,h=o*s,d=o*f,m=a*s,M=a*f,p=u*f,v=i*c,b=i*s,_=i*f,E=e[0],T=e[1],y=e[2];return t[0]=(1-(m+p))*E,t[1]=(h+_)*E,t[2]=(d-b)*E,t[3]=0,t[4]=(h-_)*T,t[5]=(1-(l+p))*T,t[6]=(M+v)*T,t[7]=0,t[8]=(d+b)*y,t[9]=(M-v)*y,t[10]=(1-(l+m))*y,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function Q(t,n,r,e,o){let a=n[0],u=n[1],i=n[2],c=n[3],s=a+a,f=u+u,l=i+i,h=a*s,d=a*f,m=a*l,M=u*f,p=u*l,v=i*l,b=c*s,_=c*f,E=c*l,T=e[0],y=e[1],w=e[2],x=o[0],A=o[1],g=o[2],R=(1-(M+v))*T,U=(d+E)*T,I=(m-_)*T,P=(d-E)*y,B=(1-(h+v))*y,S=(p+b)*y,C=(m+_)*w,D=(p-b)*w,O=(1-(h+M))*w;return t[0]=R,t[1]=U,t[2]=I,t[3]=0,t[4]=P,t[5]=B,t[6]=S,t[7]=0,t[8]=C,t[9]=D,t[10]=O,t[11]=0,t[12]=r[0]+x-(R*x+P*A+C*g),t[13]=r[1]+A-(U*x+B*A+D*g),t[14]=r[2]+g-(I*x+S*A+O*g),t[15]=1,t}function J(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],u=r+r,i=e+e,c=o+o,s=r*u,f=e*u,l=e*i,h=o*u,d=o*i,m=o*c,M=a*u,p=a*i,v=a*c;return t[0]=1-l-m,t[1]=f+v,t[2]=h-p,t[3]=0,t[4]=f-v,t[5]=1-s-m,t[6]=d+M,t[7]=0,t[8]=h+p,t[9]=d-M,t[10]=1-s-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function $(t,n,r,e,o,a,u){let i=1/(r-n),c=1/(o-e),s=1/(a-u);return t[0]=2*a*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*c,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(o+e)*c,t[10]=(u+a)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=u*a*2*s,t[15]=0,t}function tt(t,n,r,e,o){let a=1/Math.tan(n/2),u=1/(e-o);return t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(o+e)*u,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*o*e*u,t[15]=0,t}function nt(t,n,r,e){let o=Math.tan(n.upDegrees*Math.PI/180),a=Math.tan(n.downDegrees*Math.PI/180),u=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),c=2/(u+i),s=2/(o+a);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=-(u-i)*c*.5,t[9]=(o-a)*s*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function rt(t,n,r,e,o,a,u){let i=1/(n-r),c=1/(e-o),s=1/(a-u);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*s,t[11]=0,t[12]=(n+r)*i,t[13]=(o+e)*c,t[14]=(u+a)*s,t[15]=1,t}function et(t,n,r,e){let o,a,u,i,c,s,f,l,h,d,m=n[0],M=n[1],p=n[2],v=e[0],b=e[1],_=e[2],T=r[0],y=r[1],w=r[2];return Math.abs(m-T)<E&&Math.abs(M-y)<E&&Math.abs(p-w)<E?U(t):(f=m-T,l=M-y,h=p-w,o=b*(h*=d=1/Math.sqrt(f*f+l*l+h*h))-_*(l*=d),a=_*(f*=d)-v*h,u=v*l-b*f,(d=Math.sqrt(o*o+a*a+u*u))?(o*=d=1/d,a*=d,u*=d):(o=0,a=0,u=0),i=l*u-h*a,c=h*o-f*u,s=f*a-l*o,(d=Math.sqrt(i*i+c*c+s*s))?(i*=d=1/d,c*=d,s*=d):(i=0,c=0,s=0),t[0]=o,t[1]=i,t[2]=f,t[3]=0,t[4]=a,t[5]=c,t[6]=l,t[7]=0,t[8]=u,t[9]=s,t[10]=h,t[11]=0,t[12]=-(o*m+a*M+u*p),t[13]=-(i*m+c*M+s*p),t[14]=-(f*m+l*M+h*p),t[15]=1,t)}function ot(t,n,r,e){let o=n[0],a=n[1],u=n[2],i=e[0],c=e[1],s=e[2],f=o-r[0],l=a-r[1],h=u-r[2],d=f*f+l*l+h*h;d>0&&(f*=d=1/Math.sqrt(d),l*=d,h*=d);let m=c*h-s*l,M=s*f-i*h,p=i*l-c*f;return(d=m*m+M*M+p*p)>0&&(m*=d=1/Math.sqrt(d),M*=d,p*=d),t[0]=m,t[1]=M,t[2]=p,t[3]=0,t[4]=l*p-h*M,t[5]=h*m-f*p,t[6]=f*M-l*m,t[7]=0,t[8]=f,t[9]=l,t[10]=h,t[11]=0,t[12]=o,t[13]=a,t[14]=u,t[15]=1,t}function at(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function ut(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function it(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function ct(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function st(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function ft(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function lt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function ht(t,n){let r=t[0],e=t[1],o=t[2],a=t[3],u=t[4],i=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],d=t[11],m=t[12],M=t[13],p=t[14],v=t[15],b=n[0],_=n[1],T=n[2],y=n[3],w=n[4],x=n[5],A=n[6],g=n[7],R=n[8],U=n[9],I=n[10],P=n[11],B=n[12],S=n[13],C=n[14],D=n[15];return Math.abs(r-b)<=E*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(e-_)<=E*Math.max(1,Math.abs(e),Math.abs(_))&&Math.abs(o-T)<=E*Math.max(1,Math.abs(o),Math.abs(T))&&Math.abs(a-y)<=E*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(u-w)<=E*Math.max(1,Math.abs(u),Math.abs(w))&&Math.abs(i-x)<=E*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(c-A)<=E*Math.max(1,Math.abs(c),Math.abs(A))&&Math.abs(s-g)<=E*Math.max(1,Math.abs(s),Math.abs(g))&&Math.abs(f-R)<=E*Math.max(1,Math.abs(f),Math.abs(R))&&Math.abs(l-U)<=E*Math.max(1,Math.abs(l),Math.abs(U))&&Math.abs(h-I)<=E*Math.max(1,Math.abs(h),Math.abs(I))&&Math.abs(d-P)<=E*Math.max(1,Math.abs(d),Math.abs(P))&&Math.abs(m-B)<=E*Math.max(1,Math.abs(m),Math.abs(B))&&Math.abs(M-S)<=E*Math.max(1,Math.abs(M),Math.abs(S))&&Math.abs(p-C)<=E*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(v-D)<=E*Math.max(1,Math.abs(v),Math.abs(D))}const dt=C,mt=ct;function Mt(){let t=new T(3);return t[0]=0,t[1]=0,t[2]=0,t}function pt(t){var n=new T(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function vt(t){let n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function bt(t,n,r){let e=new T(3);return e[0]=t,e[1]=n,e[2]=r,e}function _t(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function Et(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function Tt(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function yt(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function wt(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function xt(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function At(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function gt(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function Rt(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function Ut(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function It(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function Pt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function Bt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function St(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return Math.sqrt(r*r+e*e+o*o)}function Ct(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return r*r+e*e+o*o}function Dt(t){let n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function Ot(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function Lt(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function Nt(t,n){let r=n[0],e=n[1],o=n[2],a=r*r+e*e+o*o;return a>0&&(a=1/Math.sqrt(a),t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a),t}function Gt(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Xt(t,n,r){let e=n[0],o=n[1],a=n[2],u=r[0],i=r[1],c=r[2];return t[0]=o*c-a*i,t[1]=a*u-e*c,t[2]=e*i-o*u,t}function Ft(t,n,r,e){let o=n[0],a=n[1],u=n[2];return t[0]=o+e*(r[0]-o),t[1]=a+e*(r[1]-a),t[2]=u+e*(r[2]-u),t}function Vt(t,n,r,e,o,a){let u=a*a,i=u*(2*a-3)+1,c=u*(a-2)+a,s=u*(a-1),f=u*(3-2*a);return t[0]=n[0]*i+r[0]*c+e[0]*s+o[0]*f,t[1]=n[1]*i+r[1]*c+e[1]*s+o[1]*f,t[2]=n[2]*i+r[2]*c+e[2]*s+o[2]*f,t}function qt(t,n,r,e,o,a){let u=1-a,i=u*u,c=a*a,s=i*u,f=3*a*i,l=3*c*u,h=c*a;return t[0]=n[0]*s+r[0]*f+e[0]*l+o[0]*h,t[1]=n[1]*s+r[1]*f+e[1]*l+o[1]*h,t[2]=n[2]*s+r[2]*f+e[2]*l+o[2]*h,t}function Yt(t,n){n=n||1;let r=2*y()*Math.PI,e=2*y()-1,o=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*o,t[1]=Math.sin(r)*o,t[2]=e*n,t}function kt(t,n,r){let e=n[0],o=n[1],a=n[2],u=r[3]*e+r[7]*o+r[11]*a+r[15];return u=u||1,t[0]=(r[0]*e+r[4]*o+r[8]*a+r[12])/u,t[1]=(r[1]*e+r[5]*o+r[9]*a+r[13])/u,t[2]=(r[2]*e+r[6]*o+r[10]*a+r[14])/u,t}function zt(t,n,r){let e=n[0],o=n[1],a=n[2];return t[0]=e*r[0]+o*r[3]+a*r[6],t[1]=e*r[1]+o*r[4]+a*r[7],t[2]=e*r[2]+o*r[5]+a*r[8],t}function jt(t,n,r){let e=n[0],o=n[1],a=n[2],u=r[0],i=r[1],c=r[2],s=r[3],f=s*e+i*a-c*o,l=s*o+c*e-u*a,h=s*a+u*o-i*e,d=-u*e-i*o-c*a;return t[0]=f*s+d*-u+l*-c-h*-i,t[1]=l*s+d*-i+h*-u-f*-c,t[2]=h*s+d*-c+f*-i-l*-u,t}function Wt(t,n,r,e){let o=[],a=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],a[0]=o[0],a[1]=o[1]*Math.cos(e)-o[2]*Math.sin(e),a[2]=o[1]*Math.sin(e)+o[2]*Math.cos(e),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Kt(t,n,r,e){let o=[],a=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],a[0]=o[2]*Math.sin(e)+o[0]*Math.cos(e),a[1]=o[1],a[2]=o[2]*Math.cos(e)-o[0]*Math.sin(e),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Zt(t,n,r,e){let o=[],a=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],a[0]=o[0]*Math.cos(e)-o[1]*Math.sin(e),a[1]=o[0]*Math.sin(e)+o[1]*Math.cos(e),a[2]=o[2],t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Ht(t,n){let r=bt(t[0],t[1],t[2]),e=bt(n[0],n[1],n[2]);Nt(r,r),Nt(e,e);let o=Gt(r,e);return o>1?0:o<-1?Math.PI:Math.acos(o)}function Qt(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Jt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function $t(t,n){let r=t[0],e=t[1],o=t[2],a=n[0],u=n[1],i=n[2];return Math.abs(r-a)<=E*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-u)<=E*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(o-i)<=E*Math.max(1,Math.abs(o),Math.abs(i))}const tn=yt,nn=wt,rn=xt,en=St,on=Ct,an=vt,un=Dt,cn=function(){let t=Mt();return function(n,r,e,o,a,u){let i,c;for(r||(r=3),e||(e=0),c=o?Math.min(o*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],a(t,t,u),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}();function sn(){let t=new T(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function fn(t){let n=new T(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function ln(t,n,r,e){let o=new T(4);return o[0]=t,o[1]=n,o[2]=r,o[3]=e,o}function hn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function dn(t,n,r,e,o){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t}function mn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function Mn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function pn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function vn(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function bn(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function _n(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function En(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t}function Tn(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t}function yn(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function wn(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function xn(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}function An(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2],a=n[3]-t[3];return Math.sqrt(r*r+e*e+o*o+a*a)}function gn(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2],a=n[3]-t[3];return r*r+e*e+o*o+a*a}function Rn(t){let n=t[0],r=t[1],e=t[2],o=t[3];return Math.sqrt(n*n+r*r+e*e+o*o)}function Un(t){let n=t[0],r=t[1],e=t[2],o=t[3];return n*n+r*r+e*e+o*o}function In(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function Pn(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function Bn(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],u=r*r+e*e+o*o+a*a;return u>0&&(u=1/Math.sqrt(u),t[0]=r*u,t[1]=e*u,t[2]=o*u,t[3]=a*u),t}function Sn(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function Cn(t,n,r,e){let o=n[0],a=n[1],u=n[2],i=n[3];return t[0]=o+e*(r[0]-o),t[1]=a+e*(r[1]-a),t[2]=u+e*(r[2]-u),t[3]=i+e*(r[3]-i),t}function Dn(t,n){return n=n||1,t[0]=y(),t[1]=y(),t[2]=y(),t[3]=y(),Bn(t,t),wn(t,t,n),t}function On(t,n,r){let e=n[0],o=n[1],a=n[2],u=n[3];return t[0]=r[0]*e+r[4]*o+r[8]*a+r[12]*u,t[1]=r[1]*e+r[5]*o+r[9]*a+r[13]*u,t[2]=r[2]*e+r[6]*o+r[10]*a+r[14]*u,t[3]=r[3]*e+r[7]*o+r[11]*a+r[15]*u,t}function Ln(t,n,r){let e=n[0],o=n[1],a=n[2],u=r[0],i=r[1],c=r[2],s=r[3],f=s*e+i*a-c*o,l=s*o+c*e-u*a,h=s*a+u*o-i*e,d=-u*e-i*o-c*a;return t[0]=f*s+d*-u+l*-c-h*-i,t[1]=l*s+d*-i+h*-u-f*-c,t[2]=h*s+d*-c+f*-i-l*-u,t[3]=n[3],t}function Nn(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function Gn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function Xn(t,n){let r=t[0],e=t[1],o=t[2],a=t[3],u=n[0],i=n[1],c=n[2],s=n[3];return Math.abs(r-u)<=E*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-i)<=E*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(o-c)<=E*Math.max(1,Math.abs(o),Math.abs(c))&&Math.abs(a-s)<=E*Math.max(1,Math.abs(a),Math.abs(s))}const Fn=Mn,Vn=pn,qn=vn,Yn=An,kn=gn,zn=Rn,jn=Un,Wn=function(){let t=sn();return function(n,r,e,o,a,u){let i,c;for(r||(r=4),e||(e=0),c=o?Math.min(o*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],a(t,t,u),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}();function Kn(){let t=new T(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Zn(t,n,r,e){let o,a,u,i,c,s=n[0],f=n[1],l=n[2],h=n[3],d=r[0],m=r[1],M=r[2],p=r[3];return(a=s*d+f*m+l*M+h*p)<0&&(a=-a,d=-d,m=-m,M=-M,p=-p),1-a>1e-6?(o=Math.acos(a),u=Math.sin(o),i=Math.sin((1-e)*o)/u,c=Math.sin(e*o)/u):(i=1-e,c=e),t[0]=i*s+c*d,t[1]=i*f+c*m,t[2]=i*l+c*M,t[3]=i*h+c*p,t}const Hn=Bn;(function(){let t=Mt(),n=bt(1,0,0),r=bt(0,1,0)})(),function(){let t=Kn(),n=Kn()}(),function(){let t=function(){let t=new T(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}()}();!function(){let t=function(){let t=new T(2);return t[0]=0,t[1]=0,t}()}();var Qn,Jn=(Qn=function(t,n){return(Qn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}Qn(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),$n=function(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,a=r.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(e=a.next()).done;)u.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return u},tr=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat($n(arguments[n]));return t},nr=function(t){function n(n){var r=t.call(this,n)||this;return r.transform=e.create(),r}return Jn(n,t),n.prototype.getInverseTransform=function(){var t=e.invert(e.create(),this.transform);if(!t)throw"Can't invert transform.";return t},n.prototype.getRight=function(){return o.clone([this.transform[0],this.transform[1],this.transform[2]])},n.prototype.getLeft=function(){return o.clone([-this.transform[0],-this.transform[1],-this.transform[2]])},n.prototype.getUp=function(){return o.clone([this.transform[4],this.transform[5],this.transform[6]])},n.prototype.getDown=function(){return o.clone([-this.transform[4],-this.transform[5],-this.transform[6]])},n.prototype.getForward=function(){return o.clone([this.transform[8],this.transform[9],this.transform[10]])},n.prototype.getBackward=function(){return o.clone([-this.transform[8],-this.transform[9],-this.transform[10]])},n.prototype.translate=function(t){e.translate(this.transform,this.transform,t)},n.prototype.rotateX=function(t){e.rotateX(this.transform,this.transform,t)},n.prototype.rotateY=function(t){e.rotateY(this.transform,this.transform,t)},n.prototype.rotateZ=function(t){e.rotateZ(this.transform,this.transform,t)},n.prototype.rotateAxis=function(t,n){e.rotate(this.transform,this.transform,t,n)},n}(i),rr=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.positionData=new Float32Array([.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5]),n}(function(t){function n(n){return t.call(this,n)||this}return Jn(n,t),n.staticConstructor=function(t){this.vao=function(t){var n=t.createVertexArray();if(!n)throw"Could not create vertex array object.";return n}(t),t.bindVertexArray(this.vao),this.positionBuffer=c(t),t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer),t.bufferData(t.ARRAY_BUFFER,this.positionData,t.STATIC_DRAW),t.vertexAttribPointer(a.POSITION,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),t.enableVertexAttribArray(a.POSITION),this.surfaceNormalBuffer=c(t),this.surfaceNormalData=this.computeSurfaceNormals(),t.bindBuffer(t.ARRAY_BUFFER,this.surfaceNormalBuffer),t.bufferData(t.ARRAY_BUFFER,this.surfaceNormalData,t.STATIC_DRAW),t.vertexAttribPointer(a.NORMAL,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),t.enableVertexAttribArray(a.NORMAL),t.vertexAttribDivisor(a.NORMAL,0)},n.computeSurfaceNormals=function(){for(var t=[],n=0;n<this.positionData.length;n+=9){var r=o.clone(this.positionData.slice(n,n+3)),e=o.clone(this.positionData.slice(n+3,n+6)),a=o.clone(this.positionData.slice(n+6,n+9)),u=o.subtract(o.create(),e,r),i=o.subtract(o.create(),a,r),c=o.normalize(o.create(),o.cross(o.create(),u,i));t.push.apply(t,tr(c,c,c))}return new Float32Array(t)},n.mode=WebGL2RenderingContext.TRIANGLES,n.attribOptions={size:3,type:WebGL2RenderingContext.FLOAT,normalize:!1,stride:0,offset:0},n}(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.prototype.scale=function(t){"number"==typeof t?e.scale(this.transform,this.transform,[t,t,t]):e.scale(this.transform,this.transform,t)},n}(nr))),er=function(){function t(){}return t.RIGHT=o.clone([1,0,0]),t.LEFT=o.clone([-1,0,0]),t.UP=o.clone([0,1,0]),t.DOWN=o.clone([0,-1,0]),t.FORWARD=o.clone([0,0,1]),t.BACKWARD=o.clone([0,0,-1]),t}(),or=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),ar=function(t){function n(n,r,o,a,u){var i=t.call(this,n)||this;return i.yFov=r,i.aspect=o,i.near=a,i.far=u,i.projection=e.perspective(e.create(),r,o,a,u),i.transformMemoizedValue=e.clone(i.transform),i.inverseTransformMemoizedValue=i.getInverseTransform(),i}return or(n,t),n.prototype.getDirection=function(){return this.getBackward()},n.prototype.getWorldToView=function(){return e.exactEquals(this.transform,this.transformMemoizedValue)||(this.transformMemoizedValue=e.clone(this.transform),this.inverseTransformMemoizedValue=this.getInverseTransform()),e.clone(this.inverseTransformMemoizedValue)},n.prototype.getSkyboxWorldToView=function(){var t=this.getWorldToView();return t[12]=0,t[13]=0,t[14]=0,t},n}(nr);var ur=function(){function t(){}return t.drawFunction=function(t,n,r){return function(e,o){var a=e.constructor;o.useProgram(n),o.bindVertexArray(a.vao);var u=o.getUniformLocation(n,"u_modelToWorld"),i=o.getUniformLocation(n,"u_worldToView"),c=o.getUniformLocation(n,"u_viewToClip");o.uniformMatrix4fv(u,!1,e.transform),o.uniformMatrix4fv(i,!1,t.getWorldToView()),o.uniformMatrix4fv(c,!1,t.projection);var s=o.getUniformLocation(n,"u_color");o.uniform4fv(s,r),o.drawArrays(a.mode,0,a.positionData.length/3)}},t.drawSkyboxFunction=function(t,n){return function(r,e){e.depthMask(!1);var o=r.constructor;e.useProgram(n),e.bindVertexArray(o.vao);var a=e.getUniformLocation(n,"u_worldToView"),u=e.getUniformLocation(n,"u_viewToClip");e.uniformMatrix4fv(a,!1,t.getSkyboxWorldToView()),e.uniformMatrix4fv(u,!1,t.projection),e.drawArrays(o.mode,0,o.positionData.length/3),e.depthMask(!0)}},t}(),ir=r(0),cr=r.n(ir),sr=r(1),fr=r.n(sr),lr=r(2),hr=r.n(lr),dr=r(3),mr=r.n(dr),Mr=r(4),pr=r.n(Mr),vr=r(5),br=r.n(vr),_r=function(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,a=r.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(e=a.next()).done;)u.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=a.return)&&r.call(a)}finally{if(o)throw o.error}}return u},Er=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(_r(arguments[n]));return t},Tr=function(){function t(){}return t.ROAD=u.clone([128,64,128,255].map((function(t){return t/255}))),t.SIDEWALK=u.clone([244,35,232,255].map((function(t){return t/255}))),t.BUILDING=u.clone([70,70,70,255].map((function(t){return t/255}))),t.CAR=u.clone([0,0,142,255].map((function(t){return t/255}))),t.VEGETATION=u.clone([107,142,35,255].map((function(t){return t/255}))),t.SKY=u.clone([70,130,180,255].map((function(t){return t/255}))),t}();function yr(t){t.clearColor(Tr.SKY[0],Tr.SKY[1],Tr.SKY[2],Tr.SKY[3]);var n=f(t,p,v),r=f(t,b,_),o=t.getUniformLocation(r,"u_skybox");t.useProgram(r),t.uniform1i(o,0);var a=l(t),u=new ar(t,Math.PI/2,a.width/a.height,.1,128);u.translate([0,8,0]),u.rotateX(-Math.PI/4);var i=function(t,n){var r=l(t),o=n.yFov*n.aspect/r.width,a=n.yFov/r.height;return new d(n,(function(t,n,r){var u=0,i=0;r.mouse.pressed&&0===r.mouse.button&&(u=r.mouse.movement.x*o,i=r.mouse.movement.y*a);t.rotateX(2*-i);var c=t.transform[12],s=t.transform[13],f=t.transform[14];t.transform[12]=0,t.transform[13]=0,t.transform[14]=0;var l=e.fromRotation(e.create(),2*-u,er.UP);e.multiply(t.transform,l,t.transform),t.transform[12]=c,t.transform[13]=s,t.transform[14]=f,r.keys.w&&t.translate([0,0,-n]),r.keys.a&&t.translate([-n,0,0]),r.keys.s&&t.translate([0,0,n]),r.keys.d&&t.translate([n,0,0])}))}(t,u),c=function(t,n,r,e,o,a,u,i){var c=ur.drawFunction(u,i,Tr.ROAD),s=ur.drawFunction(u,i,Tr.BUILDING),f=ur.drawFunction(u,i,Tr.SIDEWALK),l=n/2,h=n+e,d={x:0,z:0},M=h*o-e,p=h*a-e,v=-M/2,b=-p/2,_=[],E=new rr(t);E.scale([16*M,1,16*p]),E.translate([0,-.5,0]),_.push(new m(E,c));for(var T=0;T<o;T++)for(var y=0;y<a;y++){d.x=v+l+T*h,d.z=b+l+y*h;var w=new rr(t);w.translate([d.x,r/2,d.z]),w.scale([n,r,n]),_.push(new m(w,s))}for(T=0;T<o;T++)for(y=0;y<a;y++){d.x=v+l+T*h,d.z=b+l+y*h;var x=void 0,A=void 0;x=d.x+l+.125,A=d.z;var g=new rr(t);g.translate([x,.025,A]),g.scale([.25,.05,n+.5]),_.push(new m(g,f)),x=d.x-l-.125,A=d.z;var R=new rr(t);R.translate([x,.025,A]),R.scale([.25,.05,n+.5]),_.push(new m(R,f)),x=d.x,A=d.z+l+.125;var U=new rr(t);U.translate([x,.025,A]),U.scale([n,.05,.25]),_.push(new m(U,f)),x=d.x,A=d.z-l-.125;var I=new rr(t);I.translate([x,.025,A]),I.scale([n,.05,.25]),_.push(new m(I,f))}return _}(t,3,5,2,8,8,u,n),s=new rr(t),h=ur.drawFunction(u,n,Tr.VEGETATION),E=new rr(t),T=ur.drawSkyboxFunction(u,r),y=new m(E,T),w=new M(u,[i],Er([new m(s,h)],c,[y])),x=function(t){var n=t.createTexture();if(!n)throw"Could not create texture.";return n}(t);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,0,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255]));var A=new Image;A.src=cr.a,A.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,A)}));var g=new Image;g.src=fr.a,g.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,g)}));var R=new Image;R.src=hr.a,R.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,R)}));var U=new Image;U.src=mr.a,U.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,U)}));var I=new Image;I.src=pr.a,I.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,I)}));var P=new Image;return P.src=br.a,P.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,x),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,P)})),w}var wr=function(t){var n="function"==typeof Symbol&&Symbol.iterator,r=n&&t[n],e=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")};function xr(t,n,r){var e=performance.now();requestAnimationFrame((function o(a){var u=.001*(a-e);r.mouse.movement.x=r.mouse.position.x-r.mouse.lastPosition.x,r.mouse.movement.y=r.mouse.position.y-r.mouse.lastPosition.y,function(t,n,r){var e,o;try{for(var a=wr(r.updatables),u=a.next();!u.done;u=a.next()){u.value.update(t,n)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=a.return)&&o.call(a)}finally{if(e)throw e.error}}}(u,r,n),function(t,n,r){var e,o;n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT);try{for(var a=wr(r.drawables),u=a.next();!u.done;u=a.next()){u.value.draw(n)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(o=a.return)&&o.call(a)}finally{if(e)throw e.error}}}(0,t,n),r.mouse.lastPosition.x=r.mouse.position.x,r.mouse.lastPosition.y=r.mouse.position.y,e=a,requestAnimationFrame(o)}))}document.addEventListener("DOMContentLoaded",(function(){!function(){var t=document.getElementById("canvas");t.focus();var n=function(t){var n={mouse:{pressed:!1,button:0,buttons:0,lastPosition:{x:0,y:0},position:{x:0,y:0},movement:{x:0,y:0}},keys:{w:!1,a:!1,s:!1,d:!1}};return t.addEventListener("mousedown",(function(t){n.mouse.pressed=!0,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mouseup",(function(t){n.mouse.pressed=!1,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mousemove",(function(t){n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mouseenter",(function(){t.focus()})),t.addEventListener("keydown",(function(t){n.keys[t.key]=!0})),t.addEventListener("keyup",(function(t){n.keys[t.key]=!1})),n}(t),r=function(t){var n=t.getContext("webgl2");if(!n)throw"Could not create context.";return n}(t);h(r),new window.ResizeObserver((function(){h(r)})).observe(t),r.enable(r.CULL_FACE),r.cullFace(r.BACK),r.enable(r.DEPTH_TEST),r.depthFunc(r.LEQUAL),r.clearColor(0,0,0,1);var e=yr(r);xr(r,e,n)}()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,