!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=6)}([function(t,n){t.exports="dist/assets/skybox/right.jpg"},function(t,n){t.exports="dist/assets/skybox/left.jpg"},function(t,n){t.exports="dist/assets/skybox/top.jpg"},function(t,n){t.exports="dist/assets/skybox/bottom.jpg"},function(t,n){t.exports="dist/assets/skybox/back.jpg"},function(t,n){t.exports="dist/assets/skybox/front.jpg"},function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"create",(function(){return s})),r.d(e,"clone",(function(){return f})),r.d(e,"copy",(function(){return c})),r.d(e,"fromValues",(function(){return h})),r.d(e,"set",(function(){return d})),r.d(e,"identity",(function(){return l})),r.d(e,"transpose",(function(){return m})),r.d(e,"invert",(function(){return M})),r.d(e,"adjoint",(function(){return p})),r.d(e,"determinant",(function(){return E})),r.d(e,"multiply",(function(){return _})),r.d(e,"translate",(function(){return T})),r.d(e,"scale",(function(){return b})),r.d(e,"rotate",(function(){return v})),r.d(e,"rotateX",(function(){return A})),r.d(e,"rotateY",(function(){return y})),r.d(e,"rotateZ",(function(){return w})),r.d(e,"fromTranslation",(function(){return x})),r.d(e,"fromScaling",(function(){return g})),r.d(e,"fromRotation",(function(){return R})),r.d(e,"fromXRotation",(function(){return U})),r.d(e,"fromYRotation",(function(){return I})),r.d(e,"fromZRotation",(function(){return B})),r.d(e,"fromRotationTranslation",(function(){return P})),r.d(e,"getTranslation",(function(){return S})),r.d(e,"getScaling",(function(){return C})),r.d(e,"getRotation",(function(){return G})),r.d(e,"fromRotationTranslationScale",(function(){return D})),r.d(e,"fromRotationTranslationScaleOrigin",(function(){return O})),r.d(e,"fromQuat",(function(){return L})),r.d(e,"frustum",(function(){return N})),r.d(e,"perspective",(function(){return X})),r.d(e,"perspectiveFromFieldOfView",(function(){return V})),r.d(e,"ortho",(function(){return F})),r.d(e,"lookAt",(function(){return k})),r.d(e,"targetTo",(function(){return Y})),r.d(e,"str",(function(){return q})),r.d(e,"frob",(function(){return W})),r.d(e,"add",(function(){return j})),r.d(e,"subtract",(function(){return z})),r.d(e,"multiplyScalar",(function(){return Z})),r.d(e,"multiplyScalarAndAdd",(function(){return H})),r.d(e,"exactEquals",(function(){return K})),r.d(e,"equals",(function(){return Q})),r.d(e,"mul",(function(){return J})),r.d(e,"sub",(function(){return $}));var o={};r.r(o),r.d(o,"create",(function(){return tt})),r.d(o,"clone",(function(){return nt})),r.d(o,"length",(function(){return rt})),r.d(o,"fromValues",(function(){return et})),r.d(o,"copy",(function(){return ot})),r.d(o,"set",(function(){return at})),r.d(o,"add",(function(){return it})),r.d(o,"subtract",(function(){return ut})),r.d(o,"multiply",(function(){return st})),r.d(o,"divide",(function(){return ft})),r.d(o,"ceil",(function(){return ct})),r.d(o,"floor",(function(){return ht})),r.d(o,"min",(function(){return dt})),r.d(o,"max",(function(){return lt})),r.d(o,"round",(function(){return mt})),r.d(o,"scale",(function(){return Mt})),r.d(o,"scaleAndAdd",(function(){return pt})),r.d(o,"distance",(function(){return Et})),r.d(o,"squaredDistance",(function(){return _t})),r.d(o,"squaredLength",(function(){return Tt})),r.d(o,"negate",(function(){return bt})),r.d(o,"inverse",(function(){return vt})),r.d(o,"normalize",(function(){return At})),r.d(o,"dot",(function(){return yt})),r.d(o,"cross",(function(){return wt})),r.d(o,"lerp",(function(){return xt})),r.d(o,"hermite",(function(){return gt})),r.d(o,"bezier",(function(){return Rt})),r.d(o,"random",(function(){return Ut})),r.d(o,"transformMat4",(function(){return It})),r.d(o,"transformMat3",(function(){return Bt})),r.d(o,"transformQuat",(function(){return Pt})),r.d(o,"rotateX",(function(){return St})),r.d(o,"rotateY",(function(){return Ct})),r.d(o,"rotateZ",(function(){return Gt})),r.d(o,"angle",(function(){return Dt})),r.d(o,"str",(function(){return Ot})),r.d(o,"exactEquals",(function(){return Lt})),r.d(o,"equals",(function(){return Nt})),r.d(o,"sub",(function(){return Xt})),r.d(o,"mul",(function(){return Vt})),r.d(o,"div",(function(){return Ft})),r.d(o,"dist",(function(){return kt})),r.d(o,"sqrDist",(function(){return Yt})),r.d(o,"len",(function(){return qt})),r.d(o,"sqrLen",(function(){return Wt})),r.d(o,"forEach",(function(){return jt}));const a=1e-6;let i="undefined"!=typeof Float32Array?Float32Array:Array;const u=Math.random;Math.PI;function s(){let t=new i(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function f(t){let n=new i(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function c(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function h(t,n,r,e,o,a,u,s,f,c,h,d,l,m,M,p){let E=new i(16);return E[0]=t,E[1]=n,E[2]=r,E[3]=e,E[4]=o,E[5]=a,E[6]=u,E[7]=s,E[8]=f,E[9]=c,E[10]=h,E[11]=d,E[12]=l,E[13]=m,E[14]=M,E[15]=p,E}function d(t,n,r,e,o,a,i,u,s,f,c,h,d,l,m,M,p){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t[4]=a,t[5]=i,t[6]=u,t[7]=s,t[8]=f,t[9]=c,t[10]=h,t[11]=d,t[12]=l,t[13]=m,t[14]=M,t[15]=p,t}function l(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function m(t,n){if(t===n){let r=n[1],e=n[2],o=n[3],a=n[6],i=n[7],u=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=a,t[11]=n[14],t[12]=o,t[13]=i,t[14]=u}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function M(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],i=n[4],u=n[5],s=n[6],f=n[7],c=n[8],h=n[9],d=n[10],l=n[11],m=n[12],M=n[13],p=n[14],E=n[15],_=r*u-e*i,T=r*s-o*i,b=r*f-a*i,v=e*s-o*u,A=e*f-a*u,y=o*f-a*s,w=c*M-h*m,x=c*p-d*m,g=c*E-l*m,R=h*p-d*M,U=h*E-l*M,I=d*E-l*p,B=_*I-T*U+b*R+v*g-A*x+y*w;return B?(B=1/B,t[0]=(u*I-s*U+f*R)*B,t[1]=(o*U-e*I-a*R)*B,t[2]=(M*y-p*A+E*v)*B,t[3]=(d*A-h*y-l*v)*B,t[4]=(s*g-i*I-f*x)*B,t[5]=(r*I-o*g+a*x)*B,t[6]=(p*b-m*y-E*T)*B,t[7]=(c*y-d*b+l*T)*B,t[8]=(i*U-u*g+f*w)*B,t[9]=(e*g-r*U-a*w)*B,t[10]=(m*A-M*b+E*_)*B,t[11]=(h*b-c*A-l*_)*B,t[12]=(u*x-i*R-s*w)*B,t[13]=(r*R-e*x+o*w)*B,t[14]=(M*T-m*v-p*_)*B,t[15]=(c*v-h*T+d*_)*B,t):null}function p(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],i=n[4],u=n[5],s=n[6],f=n[7],c=n[8],h=n[9],d=n[10],l=n[11],m=n[12],M=n[13],p=n[14],E=n[15];return t[0]=u*(d*E-l*p)-h*(s*E-f*p)+M*(s*l-f*d),t[1]=-(e*(d*E-l*p)-h*(o*E-a*p)+M*(o*l-a*d)),t[2]=e*(s*E-f*p)-u*(o*E-a*p)+M*(o*f-a*s),t[3]=-(e*(s*l-f*d)-u*(o*l-a*d)+h*(o*f-a*s)),t[4]=-(i*(d*E-l*p)-c*(s*E-f*p)+m*(s*l-f*d)),t[5]=r*(d*E-l*p)-c*(o*E-a*p)+m*(o*l-a*d),t[6]=-(r*(s*E-f*p)-i*(o*E-a*p)+m*(o*f-a*s)),t[7]=r*(s*l-f*d)-i*(o*l-a*d)+c*(o*f-a*s),t[8]=i*(h*E-l*M)-c*(u*E-f*M)+m*(u*l-f*h),t[9]=-(r*(h*E-l*M)-c*(e*E-a*M)+m*(e*l-a*h)),t[10]=r*(u*E-f*M)-i*(e*E-a*M)+m*(e*f-a*u),t[11]=-(r*(u*l-f*h)-i*(e*l-a*h)+c*(e*f-a*u)),t[12]=-(i*(h*p-d*M)-c*(u*p-s*M)+m*(u*d-s*h)),t[13]=r*(h*p-d*M)-c*(e*p-o*M)+m*(e*d-o*h),t[14]=-(r*(u*p-s*M)-i*(e*p-o*M)+m*(e*s-o*u)),t[15]=r*(u*d-s*h)-i*(e*d-o*h)+c*(e*s-o*u),t}function E(t){let n=t[0],r=t[1],e=t[2],o=t[3],a=t[4],i=t[5],u=t[6],s=t[7],f=t[8],c=t[9],h=t[10],d=t[11],l=t[12],m=t[13],M=t[14],p=t[15];return(n*i-r*a)*(h*p-d*M)-(n*u-e*a)*(c*p-d*m)+(n*s-o*a)*(c*M-h*m)+(r*u-e*i)*(f*p-d*l)-(r*s-o*i)*(f*M-h*l)+(e*s-o*u)*(f*m-c*l)}function _(t,n,r){let e=n[0],o=n[1],a=n[2],i=n[3],u=n[4],s=n[5],f=n[6],c=n[7],h=n[8],d=n[9],l=n[10],m=n[11],M=n[12],p=n[13],E=n[14],_=n[15],T=r[0],b=r[1],v=r[2],A=r[3];return t[0]=T*e+b*u+v*h+A*M,t[1]=T*o+b*s+v*d+A*p,t[2]=T*a+b*f+v*l+A*E,t[3]=T*i+b*c+v*m+A*_,T=r[4],b=r[5],v=r[6],A=r[7],t[4]=T*e+b*u+v*h+A*M,t[5]=T*o+b*s+v*d+A*p,t[6]=T*a+b*f+v*l+A*E,t[7]=T*i+b*c+v*m+A*_,T=r[8],b=r[9],v=r[10],A=r[11],t[8]=T*e+b*u+v*h+A*M,t[9]=T*o+b*s+v*d+A*p,t[10]=T*a+b*f+v*l+A*E,t[11]=T*i+b*c+v*m+A*_,T=r[12],b=r[13],v=r[14],A=r[15],t[12]=T*e+b*u+v*h+A*M,t[13]=T*o+b*s+v*d+A*p,t[14]=T*a+b*f+v*l+A*E,t[15]=T*i+b*c+v*m+A*_,t}function T(t,n,r){let e,o,a,i,u,s,f,c,h,d,l,m,M=r[0],p=r[1],E=r[2];return n===t?(t[12]=n[0]*M+n[4]*p+n[8]*E+n[12],t[13]=n[1]*M+n[5]*p+n[9]*E+n[13],t[14]=n[2]*M+n[6]*p+n[10]*E+n[14],t[15]=n[3]*M+n[7]*p+n[11]*E+n[15]):(e=n[0],o=n[1],a=n[2],i=n[3],u=n[4],s=n[5],f=n[6],c=n[7],h=n[8],d=n[9],l=n[10],m=n[11],t[0]=e,t[1]=o,t[2]=a,t[3]=i,t[4]=u,t[5]=s,t[6]=f,t[7]=c,t[8]=h,t[9]=d,t[10]=l,t[11]=m,t[12]=e*M+u*p+h*E+n[12],t[13]=o*M+s*p+d*E+n[13],t[14]=a*M+f*p+l*E+n[14],t[15]=i*M+c*p+m*E+n[15]),t}function b(t,n,r){let e=r[0],o=r[1],a=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=n[7]*o,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=n[11]*a,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function v(t,n,r,e){let o,i,u,s,f,c,h,d,l,m,M,p,E,_,T,b,v,A,y,w,x,g,R,U,I=e[0],B=e[1],P=e[2],S=Math.sqrt(I*I+B*B+P*P);return Math.abs(S)<a?null:(I*=S=1/S,B*=S,P*=S,o=Math.sin(r),u=1-(i=Math.cos(r)),s=n[0],f=n[1],c=n[2],h=n[3],d=n[4],l=n[5],m=n[6],M=n[7],p=n[8],E=n[9],_=n[10],T=n[11],b=I*I*u+i,v=B*I*u+P*o,A=P*I*u-B*o,y=I*B*u-P*o,w=B*B*u+i,x=P*B*u+I*o,g=I*P*u+B*o,R=B*P*u-I*o,U=P*P*u+i,t[0]=s*b+d*v+p*A,t[1]=f*b+l*v+E*A,t[2]=c*b+m*v+_*A,t[3]=h*b+M*v+T*A,t[4]=s*y+d*w+p*x,t[5]=f*y+l*w+E*x,t[6]=c*y+m*w+_*x,t[7]=h*y+M*w+T*x,t[8]=s*g+d*R+p*U,t[9]=f*g+l*R+E*U,t[10]=c*g+m*R+_*U,t[11]=h*g+M*R+T*U,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function A(t,n,r){let e=Math.sin(r),o=Math.cos(r),a=n[4],i=n[5],u=n[6],s=n[7],f=n[8],c=n[9],h=n[10],d=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=a*o+f*e,t[5]=i*o+c*e,t[6]=u*o+h*e,t[7]=s*o+d*e,t[8]=f*o-a*e,t[9]=c*o-i*e,t[10]=h*o-u*e,t[11]=d*o-s*e,t}function y(t,n,r){let e=Math.sin(r),o=Math.cos(r),a=n[0],i=n[1],u=n[2],s=n[3],f=n[8],c=n[9],h=n[10],d=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*o-f*e,t[1]=i*o-c*e,t[2]=u*o-h*e,t[3]=s*o-d*e,t[8]=a*e+f*o,t[9]=i*e+c*o,t[10]=u*e+h*o,t[11]=s*e+d*o,t}function w(t,n,r){let e=Math.sin(r),o=Math.cos(r),a=n[0],i=n[1],u=n[2],s=n[3],f=n[4],c=n[5],h=n[6],d=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*o+f*e,t[1]=i*o+c*e,t[2]=u*o+h*e,t[3]=s*o+d*e,t[4]=f*o-a*e,t[5]=c*o-i*e,t[6]=h*o-u*e,t[7]=d*o-s*e,t}function x(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function g(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function R(t,n,r){let e,o,i,u=r[0],s=r[1],f=r[2],c=Math.sqrt(u*u+s*s+f*f);return Math.abs(c)<a?null:(u*=c=1/c,s*=c,f*=c,e=Math.sin(n),i=1-(o=Math.cos(n)),t[0]=u*u*i+o,t[1]=s*u*i+f*e,t[2]=f*u*i-s*e,t[3]=0,t[4]=u*s*i-f*e,t[5]=s*s*i+o,t[6]=f*s*i+u*e,t[7]=0,t[8]=u*f*i+s*e,t[9]=s*f*i-u*e,t[10]=f*f*i+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function U(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function I(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function B(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function P(t,n,r){let e=n[0],o=n[1],a=n[2],i=n[3],u=e+e,s=o+o,f=a+a,c=e*u,h=e*s,d=e*f,l=o*s,m=o*f,M=a*f,p=i*u,E=i*s,_=i*f;return t[0]=1-(l+M),t[1]=h+_,t[2]=d-E,t[3]=0,t[4]=h-_,t[5]=1-(c+M),t[6]=m+p,t[7]=0,t[8]=d+E,t[9]=m-p,t[10]=1-(c+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function S(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function C(t,n){let r=n[0],e=n[1],o=n[2],a=n[4],i=n[5],u=n[6],s=n[8],f=n[9],c=n[10];return t[0]=Math.sqrt(r*r+e*e+o*o),t[1]=Math.sqrt(a*a+i*i+u*u),t[2]=Math.sqrt(s*s+f*f+c*c),t}function G(t,n){let r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function D(t,n,r,e){let o=n[0],a=n[1],i=n[2],u=n[3],s=o+o,f=a+a,c=i+i,h=o*s,d=o*f,l=o*c,m=a*f,M=a*c,p=i*c,E=u*s,_=u*f,T=u*c,b=e[0],v=e[1],A=e[2];return t[0]=(1-(m+p))*b,t[1]=(d+T)*b,t[2]=(l-_)*b,t[3]=0,t[4]=(d-T)*v,t[5]=(1-(h+p))*v,t[6]=(M+E)*v,t[7]=0,t[8]=(l+_)*A,t[9]=(M-E)*A,t[10]=(1-(h+m))*A,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function O(t,n,r,e,o){let a=n[0],i=n[1],u=n[2],s=n[3],f=a+a,c=i+i,h=u+u,d=a*f,l=a*c,m=a*h,M=i*c,p=i*h,E=u*h,_=s*f,T=s*c,b=s*h,v=e[0],A=e[1],y=e[2],w=o[0],x=o[1],g=o[2],R=(1-(M+E))*v,U=(l+b)*v,I=(m-T)*v,B=(l-b)*A,P=(1-(d+E))*A,S=(p+_)*A,C=(m+T)*y,G=(p-_)*y,D=(1-(d+M))*y;return t[0]=R,t[1]=U,t[2]=I,t[3]=0,t[4]=B,t[5]=P,t[6]=S,t[7]=0,t[8]=C,t[9]=G,t[10]=D,t[11]=0,t[12]=r[0]+w-(R*w+B*x+C*g),t[13]=r[1]+x-(U*w+P*x+G*g),t[14]=r[2]+g-(I*w+S*x+D*g),t[15]=1,t}function L(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],i=r+r,u=e+e,s=o+o,f=r*i,c=e*i,h=e*u,d=o*i,l=o*u,m=o*s,M=a*i,p=a*u,E=a*s;return t[0]=1-h-m,t[1]=c+E,t[2]=d-p,t[3]=0,t[4]=c-E,t[5]=1-f-m,t[6]=l+M,t[7]=0,t[8]=d+p,t[9]=l-M,t[10]=1-f-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function N(t,n,r,e,o,a,i){let u=1/(r-n),s=1/(o-e),f=1/(a-i);return t[0]=2*a*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*s,t[6]=0,t[7]=0,t[8]=(r+n)*u,t[9]=(o+e)*s,t[10]=(i+a)*f,t[11]=-1,t[12]=0,t[13]=0,t[14]=i*a*2*f,t[15]=0,t}function X(t,n,r,e,o){let a=1/Math.tan(n/2),i=1/(e-o);return t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(o+e)*i,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*o*e*i,t[15]=0,t}function V(t,n,r,e){let o=Math.tan(n.upDegrees*Math.PI/180),a=Math.tan(n.downDegrees*Math.PI/180),i=Math.tan(n.leftDegrees*Math.PI/180),u=Math.tan(n.rightDegrees*Math.PI/180),s=2/(i+u),f=2/(o+a);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=f,t[6]=0,t[7]=0,t[8]=-(i-u)*s*.5,t[9]=(o-a)*f*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function F(t,n,r,e,o,a,i){let u=1/(n-r),s=1/(e-o),f=1/(a-i);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*f,t[11]=0,t[12]=(n+r)*u,t[13]=(o+e)*s,t[14]=(i+a)*f,t[15]=1,t}function k(t,n,r,e){let o,i,u,s,f,c,h,d,m,M,p=n[0],E=n[1],_=n[2],T=e[0],b=e[1],v=e[2],A=r[0],y=r[1],w=r[2];return Math.abs(p-A)<a&&Math.abs(E-y)<a&&Math.abs(_-w)<a?l(t):(h=p-A,d=E-y,m=_-w,o=b*(m*=M=1/Math.sqrt(h*h+d*d+m*m))-v*(d*=M),i=v*(h*=M)-T*m,u=T*d-b*h,(M=Math.sqrt(o*o+i*i+u*u))?(o*=M=1/M,i*=M,u*=M):(o=0,i=0,u=0),s=d*u-m*i,f=m*o-h*u,c=h*i-d*o,(M=Math.sqrt(s*s+f*f+c*c))?(s*=M=1/M,f*=M,c*=M):(s=0,f=0,c=0),t[0]=o,t[1]=s,t[2]=h,t[3]=0,t[4]=i,t[5]=f,t[6]=d,t[7]=0,t[8]=u,t[9]=c,t[10]=m,t[11]=0,t[12]=-(o*p+i*E+u*_),t[13]=-(s*p+f*E+c*_),t[14]=-(h*p+d*E+m*_),t[15]=1,t)}function Y(t,n,r,e){let o=n[0],a=n[1],i=n[2],u=e[0],s=e[1],f=e[2],c=o-r[0],h=a-r[1],d=i-r[2],l=c*c+h*h+d*d;l>0&&(c*=l=1/Math.sqrt(l),h*=l,d*=l);let m=s*d-f*h,M=f*c-u*d,p=u*h-s*c;return(l=m*m+M*M+p*p)>0&&(m*=l=1/Math.sqrt(l),M*=l,p*=l),t[0]=m,t[1]=M,t[2]=p,t[3]=0,t[4]=h*p-d*M,t[5]=d*m-c*p,t[6]=c*M-h*m,t[7]=0,t[8]=c,t[9]=h,t[10]=d,t[11]=0,t[12]=o,t[13]=a,t[14]=i,t[15]=1,t}function q(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function W(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function j(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function z(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function Z(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function H(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function K(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function Q(t,n){let r=t[0],e=t[1],o=t[2],i=t[3],u=t[4],s=t[5],f=t[6],c=t[7],h=t[8],d=t[9],l=t[10],m=t[11],M=t[12],p=t[13],E=t[14],_=t[15],T=n[0],b=n[1],v=n[2],A=n[3],y=n[4],w=n[5],x=n[6],g=n[7],R=n[8],U=n[9],I=n[10],B=n[11],P=n[12],S=n[13],C=n[14],G=n[15];return Math.abs(r-T)<=a*Math.max(1,Math.abs(r),Math.abs(T))&&Math.abs(e-b)<=a*Math.max(1,Math.abs(e),Math.abs(b))&&Math.abs(o-v)<=a*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(i-A)<=a*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(u-y)<=a*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(s-w)<=a*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(f-x)<=a*Math.max(1,Math.abs(f),Math.abs(x))&&Math.abs(c-g)<=a*Math.max(1,Math.abs(c),Math.abs(g))&&Math.abs(h-R)<=a*Math.max(1,Math.abs(h),Math.abs(R))&&Math.abs(d-U)<=a*Math.max(1,Math.abs(d),Math.abs(U))&&Math.abs(l-I)<=a*Math.max(1,Math.abs(l),Math.abs(I))&&Math.abs(m-B)<=a*Math.max(1,Math.abs(m),Math.abs(B))&&Math.abs(M-P)<=a*Math.max(1,Math.abs(M),Math.abs(P))&&Math.abs(p-S)<=a*Math.max(1,Math.abs(p),Math.abs(S))&&Math.abs(E-C)<=a*Math.max(1,Math.abs(E),Math.abs(C))&&Math.abs(_-G)<=a*Math.max(1,Math.abs(_),Math.abs(G))}const J=_,$=z;function tt(){let t=new i(3);return t[0]=0,t[1]=0,t[2]=0,t}function nt(t){var n=new i(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function rt(t){let n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function et(t,n,r){let e=new i(3);return e[0]=t,e[1]=n,e[2]=r,e}function ot(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function at(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function it(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function ut(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function st(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function ft(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function ct(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function ht(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function dt(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function lt(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function mt(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function Mt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function pt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function Et(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return Math.sqrt(r*r+e*e+o*o)}function _t(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return r*r+e*e+o*o}function Tt(t){let n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function bt(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function vt(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function At(t,n){let r=n[0],e=n[1],o=n[2],a=r*r+e*e+o*o;return a>0&&(a=1/Math.sqrt(a),t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a),t}function yt(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function wt(t,n,r){let e=n[0],o=n[1],a=n[2],i=r[0],u=r[1],s=r[2];return t[0]=o*s-a*u,t[1]=a*i-e*s,t[2]=e*u-o*i,t}function xt(t,n,r,e){let o=n[0],a=n[1],i=n[2];return t[0]=o+e*(r[0]-o),t[1]=a+e*(r[1]-a),t[2]=i+e*(r[2]-i),t}function gt(t,n,r,e,o,a){let i=a*a,u=i*(2*a-3)+1,s=i*(a-2)+a,f=i*(a-1),c=i*(3-2*a);return t[0]=n[0]*u+r[0]*s+e[0]*f+o[0]*c,t[1]=n[1]*u+r[1]*s+e[1]*f+o[1]*c,t[2]=n[2]*u+r[2]*s+e[2]*f+o[2]*c,t}function Rt(t,n,r,e,o,a){let i=1-a,u=i*i,s=a*a,f=u*i,c=3*a*u,h=3*s*i,d=s*a;return t[0]=n[0]*f+r[0]*c+e[0]*h+o[0]*d,t[1]=n[1]*f+r[1]*c+e[1]*h+o[1]*d,t[2]=n[2]*f+r[2]*c+e[2]*h+o[2]*d,t}function Ut(t,n){n=n||1;let r=2*u()*Math.PI,e=2*u()-1,o=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*o,t[1]=Math.sin(r)*o,t[2]=e*n,t}function It(t,n,r){let e=n[0],o=n[1],a=n[2],i=r[3]*e+r[7]*o+r[11]*a+r[15];return i=i||1,t[0]=(r[0]*e+r[4]*o+r[8]*a+r[12])/i,t[1]=(r[1]*e+r[5]*o+r[9]*a+r[13])/i,t[2]=(r[2]*e+r[6]*o+r[10]*a+r[14])/i,t}function Bt(t,n,r){let e=n[0],o=n[1],a=n[2];return t[0]=e*r[0]+o*r[3]+a*r[6],t[1]=e*r[1]+o*r[4]+a*r[7],t[2]=e*r[2]+o*r[5]+a*r[8],t}function Pt(t,n,r){let e=n[0],o=n[1],a=n[2],i=r[0],u=r[1],s=r[2],f=r[3],c=f*e+u*a-s*o,h=f*o+s*e-i*a,d=f*a+i*o-u*e,l=-i*e-u*o-s*a;return t[0]=c*f+l*-i+h*-s-d*-u,t[1]=h*f+l*-u+d*-i-c*-s,t[2]=d*f+l*-s+c*-u-h*-i,t}function St(t,n,r,e){let o=[],a=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],a[0]=o[0],a[1]=o[1]*Math.cos(e)-o[2]*Math.sin(e),a[2]=o[1]*Math.sin(e)+o[2]*Math.cos(e),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Ct(t,n,r,e){let o=[],a=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],a[0]=o[2]*Math.sin(e)+o[0]*Math.cos(e),a[1]=o[1],a[2]=o[2]*Math.cos(e)-o[0]*Math.sin(e),t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Gt(t,n,r,e){let o=[],a=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],a[0]=o[0]*Math.cos(e)-o[1]*Math.sin(e),a[1]=o[0]*Math.sin(e)+o[1]*Math.cos(e),a[2]=o[2],t[0]=a[0]+r[0],t[1]=a[1]+r[1],t[2]=a[2]+r[2],t}function Dt(t,n){let r=et(t[0],t[1],t[2]),e=et(n[0],n[1],n[2]);At(r,r),At(e,e);let o=yt(r,e);return o>1?0:o<-1?Math.PI:Math.acos(o)}function Ot(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Lt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Nt(t,n){let r=t[0],e=t[1],o=t[2],i=n[0],u=n[1],s=n[2];return Math.abs(r-i)<=a*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-u)<=a*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(o-s)<=a*Math.max(1,Math.abs(o),Math.abs(s))}const Xt=ut,Vt=st,Ft=ft,kt=Et,Yt=_t,qt=rt,Wt=Tt,jt=function(){let t=tt();return function(n,r,e,o,a,i){let u,s;for(r||(r=3),e||(e=0),s=o?Math.min(o*r+e,n.length):n.length,u=e;u<s;u+=r)t[0]=n[u],t[1]=n[u+1],t[2]=n[u+2],a(t,t,i),n[u]=t[0],n[u+1]=t[1],n[u+2]=t[2];return n}}();function zt(t,n){let r=n[0],e=n[1],o=n[2],a=n[3],i=r*r+e*e+o*o+a*a;return i>0&&(i=1/Math.sqrt(i),t[0]=r*i,t[1]=e*i,t[2]=o*i,t[3]=a*i),t}!function(){let t=function(){let t=new i(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}()}();function Zt(){let t=new i(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Ht(t,n,r,e){let o,a,i,u,s,f=n[0],c=n[1],h=n[2],d=n[3],l=r[0],m=r[1],M=r[2],p=r[3];return(a=f*l+c*m+h*M+d*p)<0&&(a=-a,l=-l,m=-m,M=-M,p=-p),1-a>1e-6?(o=Math.acos(a),i=Math.sin(o),u=Math.sin((1-e)*o)/i,s=Math.sin(e*o)/i):(u=1-e,s=e),t[0]=u*f+s*l,t[1]=u*c+s*m,t[2]=u*h+s*M,t[3]=u*d+s*p,t}const Kt=zt;(function(){let t=tt(),n=et(1,0,0),r=et(0,1,0)})(),function(){let t=Zt(),n=Zt()}(),function(){let t=function(){let t=new i(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}()}();!function(){let t=function(){let t=new i(2);return t[0]=0,t[1]=0,t}()}();function Qt(t){var n=t.createBuffer();if(!n)throw"Could not create positionBuffer.";return n}function Jt(t,n,r){var e=t.createShader(n);if(!e)throw"Could not create shader.";if(t.shaderSource(e,r),t.compileShader(e),!t.getShaderParameter(e,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(e)),t.deleteShader(e),"Could not create shader.";return e}function $t(t,n,r){var e=Jt(t,t.VERTEX_SHADER,n),o=Jt(t,t.FRAGMENT_SHADER,r),a=t.createProgram();if(!a)throw"Could not create program.";if(t.attachShader(a,e),t.attachShader(a,o),t.linkProgram(a),!t.getProgramParameter(a,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(a)),t.deleteProgram(a),"Could not link program.";return a}function tn(t){var n=t.canvas;n.width===n.clientWidth&&n.height===n.clientHeight||(n.width=n.clientWidth,n.height=n.clientHeight,t.viewport(0,0,n.width,n.height))}var nn;!function(t){t[t.POSITION=0]="POSITION"}(nn||(nn={}));var rn,en=function(){function t(){}return t.RIGHT=o.clone([1,0,0]),t.LEFT=o.clone([-1,0,0]),t.UP=o.clone([0,1,0]),t.DOWN=o.clone([0,-1,0]),t.FORWARD=o.clone([0,0,1]),t.BACKWARD=o.clone([0,0,-1]),t}(),on=(rn=function(t,n){return(rn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}rn(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),an=function(){function t(){this.transform=e.create()}return t.prototype.getInverseTransform=function(){var t=e.invert(e.create(),this.transform);if(!t)throw"Can't invert transform.";return t},t.prototype.getRight=function(){return o.clone([this.transform[0],this.transform[1],this.transform[2]])},t.prototype.getLeft=function(){return o.clone([-this.transform[0],-this.transform[1],-this.transform[2]])},t.prototype.getUp=function(){return o.clone([this.transform[4],this.transform[5],this.transform[6]])},t.prototype.getDown=function(){return o.clone([-this.transform[4],-this.transform[5],-this.transform[6]])},t.prototype.getForward=function(){return o.clone([this.transform[8],this.transform[9],this.transform[10]])},t.prototype.getBackward=function(){return o.clone([-this.transform[8],-this.transform[9],-this.transform[10]])},t.prototype.translate=function(t){e.translate(this.transform,this.transform,t)},t.prototype.rotateX=function(t){e.rotateX(this.transform,this.transform,t)},t.prototype.rotateY=function(t){e.rotateY(this.transform,this.transform,t)},t.prototype.rotateZ=function(t){e.rotateZ(this.transform,this.transform,t)},t.prototype.rotateAxis=function(t,n){e.rotate(this.transform,this.transform,t,n)},t}(),un=function(t){function n(){return t.call(this)||this}return on(n,t),n.initVao=function(t){this.vao||(this.vao=function(t){var n=t.createVertexArray();if(!n)throw"Could not create vertex array object.";return n}(t),t.bindVertexArray(this.vao),this.indexBuffer||(this.indexBuffer=Qt(t)),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indexArray,t.STATIC_DRAW),this.positionBuffer||(this.positionBuffer=Qt(t)),t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer),t.bufferData(t.ARRAY_BUFFER,this.positionArray,t.STATIC_DRAW),t.vertexAttribPointer(nn.POSITION,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),t.enableVertexAttribArray(nn.POSITION))},n.mode=WebGL2RenderingContext.TRIANGLES,n.attribOptions={size:3,type:WebGL2RenderingContext.FLOAT,normalize:!1,stride:0,offset:0},n}(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return on(n,t),n.prototype.scale=function(t,n,r){void 0===n?void 0===r?(n=t,r=t):n=1:void 0===r&&(r=1),e.scale(this.transform,this.transform,[t,n,r])},n}(an)),sn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return on(n,t),n.positionArray=new Float32Array([.5,.5,.5,-.5,.5,.5,.5,-.5,.5,-.5,-.5,.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),n.indexArray=new Uint16Array([1,0,3,2,6,0,4,1,5,3,7,6,5,4]),n.mode=WebGL2RenderingContext.TRIANGLE_STRIP,n}(un),fn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return on(n,t),n.indexArray=new Uint16Array([1,0,3,2,6,0,4,1,5,3,7,6,5,4]),n}(sn),cn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return on(n,t),n.positionArray=new Float32Array([0,0,0,0,150,0,30,0,0,0,150,0,30,150,0,30,0,0,30,0,0,30,30,0,100,0,0,30,30,0,100,30,0,100,0,0,30,60,0,30,90,0,67,60,0,30,90,0,67,90,0,67,60,0,0,0,30,30,0,30,0,150,30,0,150,30,30,0,30,30,150,30,30,0,30,100,0,30,30,30,30,30,30,30,100,0,30,100,30,30,30,60,30,67,60,30,30,90,30,30,90,30,67,60,30,67,90,30,0,0,0,100,0,0,100,0,30,0,0,0,100,0,30,0,0,30,100,0,0,100,30,0,100,30,30,100,0,0,100,30,30,100,0,30,30,30,0,30,30,30,100,30,30,30,30,0,100,30,30,100,30,0,30,30,0,30,60,30,30,30,30,30,30,0,30,60,0,30,60,30,30,60,0,67,60,30,30,60,30,30,60,0,67,60,0,67,60,30,67,60,0,67,90,30,67,60,30,67,60,0,67,90,0,67,90,30,30,90,0,30,90,30,67,90,30,30,90,0,67,90,30,67,90,0,30,90,0,30,150,30,30,90,30,30,90,0,30,150,0,30,150,30,0,150,0,0,150,30,30,150,30,0,150,0,30,150,30,30,150,0,0,0,0,0,0,30,0,150,30,0,0,0,0,150,30,0,150,0]).map((function(t){return t/300})),n.indexArray=new Uint16Array(Array.from(Array(n.positionArray.length/3).keys())),n}(un),hn=(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}on(n,t),n.setGeometry=function(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,0,1,1,0]),t.STATIC_DRAW)}}(un),"#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_modelToWorld;\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nvoid main() {\n    gl_Position = u_viewToClip * u_worldToView * u_modelToWorld * a_position;\n}"),dn="#version 300 es\n\nprecision mediump float;\n\nout vec4 o_color;\n\nvoid main() {\n    o_color = vec4(1, 0, 0.5, 1);\n}",ln="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_texCoord;\n\nvoid main()\n{\n    v_texCoord = a_position.xyz;\n\n    vec4 clipSpace = u_viewToClip * u_worldToView * a_position;\n    gl_Position = clipSpace.xyww;\n}",mn="#version 300 es\n\nprecision mediump float;\n\nin vec3 v_texCoord;\n\nuniform samplerCube u_skybox;\n\nout vec4 o_color;\n\nvoid main()\n{\n    o_color = texture(u_skybox, v_texCoord);\n}",Mn=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),pn=function(t){function n(n,r,o,a){var i=t.call(this)||this;return i.projection=e.perspective(e.create(),n,r,o,a),i.transformMemoizedValue=e.clone(i.transform),i.inverseTransformMemoizedValue=i.getInverseTransform(),i}return Mn(n,t),n.prototype.getDirection=function(){return this.getBackward()},n.prototype.getWorldToView=function(){return e.exactEquals(this.transform,this.transformMemoizedValue)||(this.transformMemoizedValue=e.clone(this.transform),this.inverseTransformMemoizedValue=this.getInverseTransform()),e.clone(this.inverseTransformMemoizedValue)},n.prototype.getSkyboxWorldToView=function(){var t=this.getWorldToView();return t[12]=0,t[13]=0,t[14]=0,t},n}(an),En=function(){function t(t,n){this.target=t,this.updateFunction=n}return t.prototype.update=function(t,n){this.updateFunction(this.target,t,n)},t}(),_n=function(){function t(t,n){this.target=t,this.drawFunction=n}return t.prototype.draw=function(t){this.drawFunction(this.target,t)},t}(),Tn=function(t,n,r,e){void 0===r&&(r=[]),void 0===e&&(e=[]),this.camera=t,this.skybox=n,this.updatables=r,this.drawables=e};var bn=function(){function t(){}return t.drawFunction=function(t,n){return function(r,e){var o=r.constructor;o.initVao(e),e.useProgram(n),e.bindVertexArray(o.vao);var a=e.getUniformLocation(n,"u_modelToWorld"),i=e.getUniformLocation(n,"u_worldToView"),u=e.getUniformLocation(n,"u_viewToClip");e.uniformMatrix4fv(a,!1,r.transform),e.uniformMatrix4fv(i,!1,t.getWorldToView()),e.uniformMatrix4fv(u,!1,t.projection),e.drawElements(o.mode,o.indexArray.length,e.UNSIGNED_SHORT,0)}},t.drawSkyboxFunction=function(t,n){return function(r,e){e.depthMask(!1);var o=r.constructor;o.initVao(e),e.useProgram(n),e.bindVertexArray(o.vao);var a=e.getUniformLocation(n,"u_worldToView"),i=e.getUniformLocation(n,"u_viewToClip");e.uniformMatrix4fv(a,!1,t.getSkyboxWorldToView()),e.uniformMatrix4fv(i,!1,t.projection),e.drawElements(o.mode,o.indexArray.length,e.UNSIGNED_SHORT,0),e.depthMask(!0)}},t}(),vn=r(0),An=r.n(vn),yn=r(1),wn=r.n(yn),xn=r(2),gn=r.n(xn),Rn=r(3),Un=r.n(Rn),In=r(4),Bn=r.n(In),Pn=r(5),Sn=r.n(Pn);function Cn(){var t=document.getElementById("canvas");t.focus();var n=function(t){var n={mouse:{pressed:!1,button:0,buttons:0,position:{x:0,y:0},movement:{x:0,y:0}},keys:{w:!1,a:!1,s:!1,d:!1}};return t.addEventListener("mousedown",(function(t){n.mouse.pressed=!0,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY,n.mouse.movement.x=t.movementX,n.mouse.movement.y=t.movementY})),t.addEventListener("mouseup",(function(t){n.mouse.pressed=!1,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY,n.mouse.movement.x=t.movementX,n.mouse.movement.y=t.movementY})),t.addEventListener("mousemove",(function(t){n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY,n.mouse.movement.x=t.movementX,n.mouse.movement.y=t.movementY})),t.addEventListener("mouseenter",(function(){t.focus()})),t.addEventListener("keydown",(function(t){n.keys[t.key]=!0})),t.addEventListener("keyup",(function(t){n.keys[t.key]=!1})),n}(t),r=function(t){var n=t.getContext("webgl2");if(!n)throw"Could not create context.";return n}(t);tn(r),new window.ResizeObserver((function(){tn(r)})).observe(t),r.enable(r.CULL_FACE),r.cullFace(r.BACK),r.enable(r.DEPTH_TEST),r.depthFunc(r.LEQUAL),r.clearColor(0,0,0,1);var o=function(t){var n=$t(t,hn,dn),r=$t(t,ln,mn),o=t.getUniformLocation(r,"u_skybox");t.uniform1i(o,0);var a=function(t){var n=t.getParameter(t.VIEWPORT);return{bounds:{left:n[0],bottom:n[1],right:n[2],top:n[3]},width:n[2]-n[0],height:n[3]-n[1]}}(t),i=new pn(Math.PI/2,a.width/a.height,.1,32);i.translate([0,0,2]);var u=new En(i,(function(t,n,r){var o=0,a=0;r.mouse.pressed&&0===r.mouse.button&&(o=r.mouse.movement.x,a=r.mouse.movement.y),t.rotateX(-a*n);var i=t.transform[12],u=t.transform[13],s=t.transform[14];t.transform[12]=0,t.transform[13]=0,t.transform[14]=0;var f=e.fromRotation(e.create(),-o*n,en.UP);e.multiply(t.transform,f,t.transform),t.transform[12]=i,t.transform[13]=u,t.transform[14]=s,r.keys.w&&t.translate([0,0,-n]),r.keys.a&&t.translate([-n,0,0]),r.keys.s&&t.translate([0,0,n]),r.keys.d&&t.translate([n,0,0])})),s=new sn;s.scale(.25);var f=bn.drawFunction(i,n),c=new _n(s,f),h=new cn;h.translate([1,1,-.5]),h.rotateZ(Math.PI/4);var d=new _n(h,f),l=new fn,m=bn.drawSkyboxFunction(i,r),M=new _n(l,m),p=new Tn(i,M,[u],[c,d]),E=function(t){var n=t.createTexture();if(!n)throw"Could not create texture.";return n}(t);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,0,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255]));var _=new Image;_.src=An.a,_.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,_)}));var T=new Image;T.src=wn.a,T.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,T)}));var b=new Image;b.src=gn.a,b.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,b)}));var v=new Image;v.src=Un.a,v.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,v)}));var A=new Image;A.src=Bn.a,A.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,A)}));var y=new Image;return y.src=Sn.a,y.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,E),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,y)})),p}(r);!function(t,n,r){var e=performance.now();requestAnimationFrame((function o(a){var i=.001*(a-e);!function(t,n,r){for(var e=0,o=r.updatables;e<o.length;e++){o[e].update(t,n)}}(i,r,n),function(t,n,r){n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT);for(var e=0,o=r.drawables;e<o.length;e++){o[e].draw(n)}r.skybox.draw(n)}(0,t,n),e=a,requestAnimationFrame(o)}))}(r,o,n)}document.addEventListener("DOMContentLoaded",(function(){Cn()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,