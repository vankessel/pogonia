!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=6)}([function(t,n){t.exports="dist/assets/skybox/right.jpg"},function(t,n){t.exports="dist/assets/skybox/left.jpg"},function(t,n){t.exports="dist/assets/skybox/top.jpg"},function(t,n){t.exports="dist/assets/skybox/bottom.jpg"},function(t,n){t.exports="dist/assets/skybox/back.jpg"},function(t,n){t.exports="dist/assets/skybox/front.jpg"},function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"create",(function(){return v})),r.d(e,"clone",(function(){return y})),r.d(e,"copy",(function(){return x})),r.d(e,"fromValues",(function(){return w})),r.d(e,"set",(function(){return A})),r.d(e,"identity",(function(){return g})),r.d(e,"transpose",(function(){return R})),r.d(e,"invert",(function(){return U})),r.d(e,"adjoint",(function(){return I})),r.d(e,"determinant",(function(){return P})),r.d(e,"multiply",(function(){return B})),r.d(e,"translate",(function(){return S})),r.d(e,"scale",(function(){return C})),r.d(e,"rotate",(function(){return G})),r.d(e,"rotateX",(function(){return D})),r.d(e,"rotateY",(function(){return O})),r.d(e,"rotateZ",(function(){return L})),r.d(e,"fromTranslation",(function(){return N})),r.d(e,"fromScaling",(function(){return F})),r.d(e,"fromRotation",(function(){return V})),r.d(e,"fromXRotation",(function(){return X})),r.d(e,"fromYRotation",(function(){return q})),r.d(e,"fromZRotation",(function(){return Y})),r.d(e,"fromRotationTranslation",(function(){return k})),r.d(e,"getTranslation",(function(){return W})),r.d(e,"getScaling",(function(){return j})),r.d(e,"getRotation",(function(){return z})),r.d(e,"fromRotationTranslationScale",(function(){return K})),r.d(e,"fromRotationTranslationScaleOrigin",(function(){return H})),r.d(e,"fromQuat",(function(){return Z})),r.d(e,"frustum",(function(){return Q})),r.d(e,"perspective",(function(){return J})),r.d(e,"perspectiveFromFieldOfView",(function(){return $})),r.d(e,"ortho",(function(){return tt})),r.d(e,"lookAt",(function(){return nt})),r.d(e,"targetTo",(function(){return rt})),r.d(e,"str",(function(){return et})),r.d(e,"frob",(function(){return ot})),r.d(e,"add",(function(){return ut})),r.d(e,"subtract",(function(){return at})),r.d(e,"multiplyScalar",(function(){return it})),r.d(e,"multiplyScalarAndAdd",(function(){return ct})),r.d(e,"exactEquals",(function(){return ft})),r.d(e,"equals",(function(){return st})),r.d(e,"mul",(function(){return lt})),r.d(e,"sub",(function(){return ht}));var o={};r.r(o),r.d(o,"create",(function(){return dt})),r.d(o,"clone",(function(){return mt})),r.d(o,"length",(function(){return Mt})),r.d(o,"fromValues",(function(){return pt})),r.d(o,"copy",(function(){return Et})),r.d(o,"set",(function(){return _t})),r.d(o,"add",(function(){return bt})),r.d(o,"subtract",(function(){return Tt})),r.d(o,"multiply",(function(){return vt})),r.d(o,"divide",(function(){return yt})),r.d(o,"ceil",(function(){return xt})),r.d(o,"floor",(function(){return wt})),r.d(o,"min",(function(){return At})),r.d(o,"max",(function(){return gt})),r.d(o,"round",(function(){return Rt})),r.d(o,"scale",(function(){return Ut})),r.d(o,"scaleAndAdd",(function(){return It})),r.d(o,"distance",(function(){return Pt})),r.d(o,"squaredDistance",(function(){return Bt})),r.d(o,"squaredLength",(function(){return St})),r.d(o,"negate",(function(){return Ct})),r.d(o,"inverse",(function(){return Gt})),r.d(o,"normalize",(function(){return Dt})),r.d(o,"dot",(function(){return Ot})),r.d(o,"cross",(function(){return Lt})),r.d(o,"lerp",(function(){return Nt})),r.d(o,"hermite",(function(){return Ft})),r.d(o,"bezier",(function(){return Vt})),r.d(o,"random",(function(){return Xt})),r.d(o,"transformMat4",(function(){return qt})),r.d(o,"transformMat3",(function(){return Yt})),r.d(o,"transformQuat",(function(){return kt})),r.d(o,"rotateX",(function(){return Wt})),r.d(o,"rotateY",(function(){return jt})),r.d(o,"rotateZ",(function(){return zt})),r.d(o,"angle",(function(){return Kt})),r.d(o,"str",(function(){return Ht})),r.d(o,"exactEquals",(function(){return Zt})),r.d(o,"equals",(function(){return Qt})),r.d(o,"sub",(function(){return Jt})),r.d(o,"mul",(function(){return $t})),r.d(o,"div",(function(){return tn})),r.d(o,"dist",(function(){return nn})),r.d(o,"sqrDist",(function(){return rn})),r.d(o,"len",(function(){return en})),r.d(o,"sqrLen",(function(){return on})),r.d(o,"forEach",(function(){return un}));var u={};function a(t){var n=t.createBuffer();if(!n)throw"Could not create positionBuffer.";return n}function i(t,n,r){var e=t.createShader(n);if(!e)throw"Could not create shader.";if(t.shaderSource(e,r),t.compileShader(e),!t.getShaderParameter(e,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(e)),t.deleteShader(e),"Could not create shader.";return e}function c(t,n,r){var e=i(t,t.VERTEX_SHADER,n),o=i(t,t.FRAGMENT_SHADER,r),u=t.createProgram();if(!u)throw"Could not create program.";if(t.attachShader(u,e),t.attachShader(u,o),t.linkProgram(u),!t.getProgramParameter(u,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(u)),t.deleteProgram(u),"Could not link program.";return u}function f(t){var n=t.getParameter(t.VIEWPORT);return{bounds:{left:n[0],bottom:n[1],right:n[2],top:n[3]},width:n[2]-n[0],height:n[3]-n[1]}}function s(t){var n=t.canvas;n.width===n.clientWidth&&n.height===n.clientHeight||(n.width=n.clientWidth,n.height=n.clientHeight,t.viewport(0,0,n.width,n.height))}r.r(u),r.d(u,"create",(function(){return an})),r.d(u,"clone",(function(){return cn})),r.d(u,"fromValues",(function(){return fn})),r.d(u,"copy",(function(){return sn})),r.d(u,"set",(function(){return ln})),r.d(u,"add",(function(){return hn})),r.d(u,"subtract",(function(){return dn})),r.d(u,"multiply",(function(){return mn})),r.d(u,"divide",(function(){return Mn})),r.d(u,"ceil",(function(){return pn})),r.d(u,"floor",(function(){return En})),r.d(u,"min",(function(){return _n})),r.d(u,"max",(function(){return bn})),r.d(u,"round",(function(){return Tn})),r.d(u,"scale",(function(){return vn})),r.d(u,"scaleAndAdd",(function(){return yn})),r.d(u,"distance",(function(){return xn})),r.d(u,"squaredDistance",(function(){return wn})),r.d(u,"length",(function(){return An})),r.d(u,"squaredLength",(function(){return gn})),r.d(u,"negate",(function(){return Rn})),r.d(u,"inverse",(function(){return Un})),r.d(u,"normalize",(function(){return In})),r.d(u,"dot",(function(){return Pn})),r.d(u,"lerp",(function(){return Bn})),r.d(u,"random",(function(){return Sn})),r.d(u,"transformMat4",(function(){return Cn})),r.d(u,"transformQuat",(function(){return Gn})),r.d(u,"str",(function(){return Dn})),r.d(u,"exactEquals",(function(){return On})),r.d(u,"equals",(function(){return Ln})),r.d(u,"sub",(function(){return Nn})),r.d(u,"mul",(function(){return Fn})),r.d(u,"div",(function(){return Vn})),r.d(u,"dist",(function(){return Xn})),r.d(u,"sqrDist",(function(){return qn})),r.d(u,"len",(function(){return Yn})),r.d(u,"sqrLen",(function(){return kn})),r.d(u,"forEach",(function(){return Wn}));var l=function(){function t(t,n){this.target=t,this.updateFunction=n}return t.prototype.update=function(t,n){this.updateFunction(this.target,t,n)},t}(),h=function(){function t(t,n){this.target=t,this.drawFunction=n}return t.prototype.draw=function(t){this.drawFunction(this.target,t)},t}(),d=function(t,n,r){void 0===n&&(n=[]),void 0===r&&(r=[]),this.camera=t,this.updatables=n,this.drawables=r},m="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_modelToWorld;\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nvoid main() {\n    gl_Position = u_viewToClip * u_worldToView * u_modelToWorld * a_position;\n}",M="#version 300 es\n\nprecision mediump float;\n\nuniform vec4 u_color;\n\nout vec4 o_color;\n\nvoid main() {\n    o_color = u_color;\n}",p="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_texCoord;\n\nvoid main()\n{\n    v_texCoord = a_position.xyz;\n\n    vec4 clipSpace = u_viewToClip * u_worldToView * a_position;\n    gl_Position = clipSpace.xyww;\n}",E="#version 300 es\n\nprecision mediump float;\n\nin vec3 v_texCoord;\n\nuniform samplerCube u_skybox;\n\nout vec4 o_color;\n\nvoid main()\n{\n    o_color = texture(u_skybox, v_texCoord);\n}";const _=1e-6;let b="undefined"!=typeof Float32Array?Float32Array:Array;const T=Math.random;Math.PI;function v(){let t=new b(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t){let n=new b(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function x(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function w(t,n,r,e,o,u,a,i,c,f,s,l,h,d,m,M){let p=new b(16);return p[0]=t,p[1]=n,p[2]=r,p[3]=e,p[4]=o,p[5]=u,p[6]=a,p[7]=i,p[8]=c,p[9]=f,p[10]=s,p[11]=l,p[12]=h,p[13]=d,p[14]=m,p[15]=M,p}function A(t,n,r,e,o,u,a,i,c,f,s,l,h,d,m,M,p){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t[4]=u,t[5]=a,t[6]=i,t[7]=c,t[8]=f,t[9]=s,t[10]=l,t[11]=h,t[12]=d,t[13]=m,t[14]=M,t[15]=p,t}function g(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function R(t,n){if(t===n){let r=n[1],e=n[2],o=n[3],u=n[6],a=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=u,t[11]=n[14],t[12]=o,t[13]=a,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function U(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=n[4],i=n[5],c=n[6],f=n[7],s=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],p=n[14],E=n[15],_=r*i-e*a,b=r*c-o*a,T=r*f-u*a,v=e*c-o*i,y=e*f-u*i,x=o*f-u*c,w=s*M-l*m,A=s*p-h*m,g=s*E-d*m,R=l*p-h*M,U=l*E-d*M,I=h*E-d*p,P=_*I-b*U+T*R+v*g-y*A+x*w;return P?(P=1/P,t[0]=(i*I-c*U+f*R)*P,t[1]=(o*U-e*I-u*R)*P,t[2]=(M*x-p*y+E*v)*P,t[3]=(h*y-l*x-d*v)*P,t[4]=(c*g-a*I-f*A)*P,t[5]=(r*I-o*g+u*A)*P,t[6]=(p*T-m*x-E*b)*P,t[7]=(s*x-h*T+d*b)*P,t[8]=(a*U-i*g+f*w)*P,t[9]=(e*g-r*U-u*w)*P,t[10]=(m*y-M*T+E*_)*P,t[11]=(l*T-s*y-d*_)*P,t[12]=(i*A-a*R-c*w)*P,t[13]=(r*R-e*A+o*w)*P,t[14]=(M*b-m*v-p*_)*P,t[15]=(s*v-l*b+h*_)*P,t):null}function I(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=n[4],i=n[5],c=n[6],f=n[7],s=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],p=n[14],E=n[15];return t[0]=i*(h*E-d*p)-l*(c*E-f*p)+M*(c*d-f*h),t[1]=-(e*(h*E-d*p)-l*(o*E-u*p)+M*(o*d-u*h)),t[2]=e*(c*E-f*p)-i*(o*E-u*p)+M*(o*f-u*c),t[3]=-(e*(c*d-f*h)-i*(o*d-u*h)+l*(o*f-u*c)),t[4]=-(a*(h*E-d*p)-s*(c*E-f*p)+m*(c*d-f*h)),t[5]=r*(h*E-d*p)-s*(o*E-u*p)+m*(o*d-u*h),t[6]=-(r*(c*E-f*p)-a*(o*E-u*p)+m*(o*f-u*c)),t[7]=r*(c*d-f*h)-a*(o*d-u*h)+s*(o*f-u*c),t[8]=a*(l*E-d*M)-s*(i*E-f*M)+m*(i*d-f*l),t[9]=-(r*(l*E-d*M)-s*(e*E-u*M)+m*(e*d-u*l)),t[10]=r*(i*E-f*M)-a*(e*E-u*M)+m*(e*f-u*i),t[11]=-(r*(i*d-f*l)-a*(e*d-u*l)+s*(e*f-u*i)),t[12]=-(a*(l*p-h*M)-s*(i*p-c*M)+m*(i*h-c*l)),t[13]=r*(l*p-h*M)-s*(e*p-o*M)+m*(e*h-o*l),t[14]=-(r*(i*p-c*M)-a*(e*p-o*M)+m*(e*c-o*i)),t[15]=r*(i*h-c*l)-a*(e*h-o*l)+s*(e*c-o*i),t}function P(t){let n=t[0],r=t[1],e=t[2],o=t[3],u=t[4],a=t[5],i=t[6],c=t[7],f=t[8],s=t[9],l=t[10],h=t[11],d=t[12],m=t[13],M=t[14],p=t[15];return(n*a-r*u)*(l*p-h*M)-(n*i-e*u)*(s*p-h*m)+(n*c-o*u)*(s*M-l*m)+(r*i-e*a)*(f*p-h*d)-(r*c-o*a)*(f*M-l*d)+(e*c-o*i)*(f*m-s*d)}function B(t,n,r){let e=n[0],o=n[1],u=n[2],a=n[3],i=n[4],c=n[5],f=n[6],s=n[7],l=n[8],h=n[9],d=n[10],m=n[11],M=n[12],p=n[13],E=n[14],_=n[15],b=r[0],T=r[1],v=r[2],y=r[3];return t[0]=b*e+T*i+v*l+y*M,t[1]=b*o+T*c+v*h+y*p,t[2]=b*u+T*f+v*d+y*E,t[3]=b*a+T*s+v*m+y*_,b=r[4],T=r[5],v=r[6],y=r[7],t[4]=b*e+T*i+v*l+y*M,t[5]=b*o+T*c+v*h+y*p,t[6]=b*u+T*f+v*d+y*E,t[7]=b*a+T*s+v*m+y*_,b=r[8],T=r[9],v=r[10],y=r[11],t[8]=b*e+T*i+v*l+y*M,t[9]=b*o+T*c+v*h+y*p,t[10]=b*u+T*f+v*d+y*E,t[11]=b*a+T*s+v*m+y*_,b=r[12],T=r[13],v=r[14],y=r[15],t[12]=b*e+T*i+v*l+y*M,t[13]=b*o+T*c+v*h+y*p,t[14]=b*u+T*f+v*d+y*E,t[15]=b*a+T*s+v*m+y*_,t}function S(t,n,r){let e,o,u,a,i,c,f,s,l,h,d,m,M=r[0],p=r[1],E=r[2];return n===t?(t[12]=n[0]*M+n[4]*p+n[8]*E+n[12],t[13]=n[1]*M+n[5]*p+n[9]*E+n[13],t[14]=n[2]*M+n[6]*p+n[10]*E+n[14],t[15]=n[3]*M+n[7]*p+n[11]*E+n[15]):(e=n[0],o=n[1],u=n[2],a=n[3],i=n[4],c=n[5],f=n[6],s=n[7],l=n[8],h=n[9],d=n[10],m=n[11],t[0]=e,t[1]=o,t[2]=u,t[3]=a,t[4]=i,t[5]=c,t[6]=f,t[7]=s,t[8]=l,t[9]=h,t[10]=d,t[11]=m,t[12]=e*M+i*p+l*E+n[12],t[13]=o*M+c*p+h*E+n[13],t[14]=u*M+f*p+d*E+n[14],t[15]=a*M+s*p+m*E+n[15]),t}function C(t,n,r){let e=r[0],o=r[1],u=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=n[7]*o,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function G(t,n,r,e){let o,u,a,i,c,f,s,l,h,d,m,M,p,E,b,T,v,y,x,w,A,g,R,U,I=e[0],P=e[1],B=e[2],S=Math.sqrt(I*I+P*P+B*B);return Math.abs(S)<_?null:(I*=S=1/S,P*=S,B*=S,o=Math.sin(r),a=1-(u=Math.cos(r)),i=n[0],c=n[1],f=n[2],s=n[3],l=n[4],h=n[5],d=n[6],m=n[7],M=n[8],p=n[9],E=n[10],b=n[11],T=I*I*a+u,v=P*I*a+B*o,y=B*I*a-P*o,x=I*P*a-B*o,w=P*P*a+u,A=B*P*a+I*o,g=I*B*a+P*o,R=P*B*a-I*o,U=B*B*a+u,t[0]=i*T+l*v+M*y,t[1]=c*T+h*v+p*y,t[2]=f*T+d*v+E*y,t[3]=s*T+m*v+b*y,t[4]=i*x+l*w+M*A,t[5]=c*x+h*w+p*A,t[6]=f*x+d*w+E*A,t[7]=s*x+m*w+b*A,t[8]=i*g+l*R+M*U,t[9]=c*g+h*R+p*U,t[10]=f*g+d*R+E*U,t[11]=s*g+m*R+b*U,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function D(t,n,r){let e=Math.sin(r),o=Math.cos(r),u=n[4],a=n[5],i=n[6],c=n[7],f=n[8],s=n[9],l=n[10],h=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=u*o+f*e,t[5]=a*o+s*e,t[6]=i*o+l*e,t[7]=c*o+h*e,t[8]=f*o-u*e,t[9]=s*o-a*e,t[10]=l*o-i*e,t[11]=h*o-c*e,t}function O(t,n,r){let e=Math.sin(r),o=Math.cos(r),u=n[0],a=n[1],i=n[2],c=n[3],f=n[8],s=n[9],l=n[10],h=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*o-f*e,t[1]=a*o-s*e,t[2]=i*o-l*e,t[3]=c*o-h*e,t[8]=u*e+f*o,t[9]=a*e+s*o,t[10]=i*e+l*o,t[11]=c*e+h*o,t}function L(t,n,r){let e=Math.sin(r),o=Math.cos(r),u=n[0],a=n[1],i=n[2],c=n[3],f=n[4],s=n[5],l=n[6],h=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*o+f*e,t[1]=a*o+s*e,t[2]=i*o+l*e,t[3]=c*o+h*e,t[4]=f*o-u*e,t[5]=s*o-a*e,t[6]=l*o-i*e,t[7]=h*o-c*e,t}function N(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function F(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function V(t,n,r){let e,o,u,a=r[0],i=r[1],c=r[2],f=Math.sqrt(a*a+i*i+c*c);return Math.abs(f)<_?null:(a*=f=1/f,i*=f,c*=f,e=Math.sin(n),u=1-(o=Math.cos(n)),t[0]=a*a*u+o,t[1]=i*a*u+c*e,t[2]=c*a*u-i*e,t[3]=0,t[4]=a*i*u-c*e,t[5]=i*i*u+o,t[6]=c*i*u+a*e,t[7]=0,t[8]=a*c*u+i*e,t[9]=i*c*u-a*e,t[10]=c*c*u+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function X(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function q(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Y(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,n,r){let e=n[0],o=n[1],u=n[2],a=n[3],i=e+e,c=o+o,f=u+u,s=e*i,l=e*c,h=e*f,d=o*c,m=o*f,M=u*f,p=a*i,E=a*c,_=a*f;return t[0]=1-(d+M),t[1]=l+_,t[2]=h-E,t[3]=0,t[4]=l-_,t[5]=1-(s+M),t[6]=m+p,t[7]=0,t[8]=h+E,t[9]=m-p,t[10]=1-(s+d),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function W(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function j(t,n){let r=n[0],e=n[1],o=n[2],u=n[4],a=n[5],i=n[6],c=n[8],f=n[9],s=n[10];return t[0]=Math.sqrt(r*r+e*e+o*o),t[1]=Math.sqrt(u*u+a*a+i*i),t[2]=Math.sqrt(c*c+f*f+s*s),t}function z(t,n){let r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function K(t,n,r,e){let o=n[0],u=n[1],a=n[2],i=n[3],c=o+o,f=u+u,s=a+a,l=o*c,h=o*f,d=o*s,m=u*f,M=u*s,p=a*s,E=i*c,_=i*f,b=i*s,T=e[0],v=e[1],y=e[2];return t[0]=(1-(m+p))*T,t[1]=(h+b)*T,t[2]=(d-_)*T,t[3]=0,t[4]=(h-b)*v,t[5]=(1-(l+p))*v,t[6]=(M+E)*v,t[7]=0,t[8]=(d+_)*y,t[9]=(M-E)*y,t[10]=(1-(l+m))*y,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function H(t,n,r,e,o){let u=n[0],a=n[1],i=n[2],c=n[3],f=u+u,s=a+a,l=i+i,h=u*f,d=u*s,m=u*l,M=a*s,p=a*l,E=i*l,_=c*f,b=c*s,T=c*l,v=e[0],y=e[1],x=e[2],w=o[0],A=o[1],g=o[2],R=(1-(M+E))*v,U=(d+T)*v,I=(m-b)*v,P=(d-T)*y,B=(1-(h+E))*y,S=(p+_)*y,C=(m+b)*x,G=(p-_)*x,D=(1-(h+M))*x;return t[0]=R,t[1]=U,t[2]=I,t[3]=0,t[4]=P,t[5]=B,t[6]=S,t[7]=0,t[8]=C,t[9]=G,t[10]=D,t[11]=0,t[12]=r[0]+w-(R*w+P*A+C*g),t[13]=r[1]+A-(U*w+B*A+G*g),t[14]=r[2]+g-(I*w+S*A+D*g),t[15]=1,t}function Z(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=r+r,i=e+e,c=o+o,f=r*a,s=e*a,l=e*i,h=o*a,d=o*i,m=o*c,M=u*a,p=u*i,E=u*c;return t[0]=1-l-m,t[1]=s+E,t[2]=h-p,t[3]=0,t[4]=s-E,t[5]=1-f-m,t[6]=d+M,t[7]=0,t[8]=h+p,t[9]=d-M,t[10]=1-f-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Q(t,n,r,e,o,u,a){let i=1/(r-n),c=1/(o-e),f=1/(u-a);return t[0]=2*u*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*c,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(o+e)*c,t[10]=(a+u)*f,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*u*2*f,t[15]=0,t}function J(t,n,r,e,o){let u=1/Math.tan(n/2),a=1/(e-o);return t[0]=u/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(o+e)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*o*e*a,t[15]=0,t}function $(t,n,r,e){let o=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),a=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),c=2/(a+i),f=2/(o+u);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=f,t[6]=0,t[7]=0,t[8]=-(a-i)*c*.5,t[9]=(o-u)*f*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function tt(t,n,r,e,o,u,a){let i=1/(n-r),c=1/(e-o),f=1/(u-a);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*f,t[11]=0,t[12]=(n+r)*i,t[13]=(o+e)*c,t[14]=(a+u)*f,t[15]=1,t}function nt(t,n,r,e){let o,u,a,i,c,f,s,l,h,d,m=n[0],M=n[1],p=n[2],E=e[0],b=e[1],T=e[2],v=r[0],y=r[1],x=r[2];return Math.abs(m-v)<_&&Math.abs(M-y)<_&&Math.abs(p-x)<_?g(t):(s=m-v,l=M-y,h=p-x,o=b*(h*=d=1/Math.sqrt(s*s+l*l+h*h))-T*(l*=d),u=T*(s*=d)-E*h,a=E*l-b*s,(d=Math.sqrt(o*o+u*u+a*a))?(o*=d=1/d,u*=d,a*=d):(o=0,u=0,a=0),i=l*a-h*u,c=h*o-s*a,f=s*u-l*o,(d=Math.sqrt(i*i+c*c+f*f))?(i*=d=1/d,c*=d,f*=d):(i=0,c=0,f=0),t[0]=o,t[1]=i,t[2]=s,t[3]=0,t[4]=u,t[5]=c,t[6]=l,t[7]=0,t[8]=a,t[9]=f,t[10]=h,t[11]=0,t[12]=-(o*m+u*M+a*p),t[13]=-(i*m+c*M+f*p),t[14]=-(s*m+l*M+h*p),t[15]=1,t)}function rt(t,n,r,e){let o=n[0],u=n[1],a=n[2],i=e[0],c=e[1],f=e[2],s=o-r[0],l=u-r[1],h=a-r[2],d=s*s+l*l+h*h;d>0&&(s*=d=1/Math.sqrt(d),l*=d,h*=d);let m=c*h-f*l,M=f*s-i*h,p=i*l-c*s;return(d=m*m+M*M+p*p)>0&&(m*=d=1/Math.sqrt(d),M*=d,p*=d),t[0]=m,t[1]=M,t[2]=p,t[3]=0,t[4]=l*p-h*M,t[5]=h*m-s*p,t[6]=s*M-l*m,t[7]=0,t[8]=s,t[9]=l,t[10]=h,t[11]=0,t[12]=o,t[13]=u,t[14]=a,t[15]=1,t}function et(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function ot(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function ut(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function at(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function it(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function ct(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function ft(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function st(t,n){let r=t[0],e=t[1],o=t[2],u=t[3],a=t[4],i=t[5],c=t[6],f=t[7],s=t[8],l=t[9],h=t[10],d=t[11],m=t[12],M=t[13],p=t[14],E=t[15],b=n[0],T=n[1],v=n[2],y=n[3],x=n[4],w=n[5],A=n[6],g=n[7],R=n[8],U=n[9],I=n[10],P=n[11],B=n[12],S=n[13],C=n[14],G=n[15];return Math.abs(r-b)<=_*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(e-T)<=_*Math.max(1,Math.abs(e),Math.abs(T))&&Math.abs(o-v)<=_*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(u-y)<=_*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(a-x)<=_*Math.max(1,Math.abs(a),Math.abs(x))&&Math.abs(i-w)<=_*Math.max(1,Math.abs(i),Math.abs(w))&&Math.abs(c-A)<=_*Math.max(1,Math.abs(c),Math.abs(A))&&Math.abs(f-g)<=_*Math.max(1,Math.abs(f),Math.abs(g))&&Math.abs(s-R)<=_*Math.max(1,Math.abs(s),Math.abs(R))&&Math.abs(l-U)<=_*Math.max(1,Math.abs(l),Math.abs(U))&&Math.abs(h-I)<=_*Math.max(1,Math.abs(h),Math.abs(I))&&Math.abs(d-P)<=_*Math.max(1,Math.abs(d),Math.abs(P))&&Math.abs(m-B)<=_*Math.max(1,Math.abs(m),Math.abs(B))&&Math.abs(M-S)<=_*Math.max(1,Math.abs(M),Math.abs(S))&&Math.abs(p-C)<=_*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(E-G)<=_*Math.max(1,Math.abs(E),Math.abs(G))}const lt=B,ht=at;function dt(){let t=new b(3);return t[0]=0,t[1]=0,t[2]=0,t}function mt(t){var n=new b(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function Mt(t){let n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function pt(t,n,r){let e=new b(3);return e[0]=t,e[1]=n,e[2]=r,e}function Et(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function _t(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function bt(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function Tt(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function vt(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function yt(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function xt(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function wt(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function At(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function gt(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function Rt(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function Ut(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function It(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function Pt(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return Math.sqrt(r*r+e*e+o*o)}function Bt(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return r*r+e*e+o*o}function St(t){let n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function Ct(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function Gt(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function Dt(t,n){let r=n[0],e=n[1],o=n[2],u=r*r+e*e+o*o;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u),t}function Ot(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Lt(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[0],i=r[1],c=r[2];return t[0]=o*c-u*i,t[1]=u*a-e*c,t[2]=e*i-o*a,t}function Nt(t,n,r,e){let o=n[0],u=n[1],a=n[2];return t[0]=o+e*(r[0]-o),t[1]=u+e*(r[1]-u),t[2]=a+e*(r[2]-a),t}function Ft(t,n,r,e,o,u){let a=u*u,i=a*(2*u-3)+1,c=a*(u-2)+u,f=a*(u-1),s=a*(3-2*u);return t[0]=n[0]*i+r[0]*c+e[0]*f+o[0]*s,t[1]=n[1]*i+r[1]*c+e[1]*f+o[1]*s,t[2]=n[2]*i+r[2]*c+e[2]*f+o[2]*s,t}function Vt(t,n,r,e,o,u){let a=1-u,i=a*a,c=u*u,f=i*a,s=3*u*i,l=3*c*a,h=c*u;return t[0]=n[0]*f+r[0]*s+e[0]*l+o[0]*h,t[1]=n[1]*f+r[1]*s+e[1]*l+o[1]*h,t[2]=n[2]*f+r[2]*s+e[2]*l+o[2]*h,t}function Xt(t,n){n=n||1;let r=2*T()*Math.PI,e=2*T()-1,o=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*o,t[1]=Math.sin(r)*o,t[2]=e*n,t}function qt(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[3]*e+r[7]*o+r[11]*u+r[15];return a=a||1,t[0]=(r[0]*e+r[4]*o+r[8]*u+r[12])/a,t[1]=(r[1]*e+r[5]*o+r[9]*u+r[13])/a,t[2]=(r[2]*e+r[6]*o+r[10]*u+r[14])/a,t}function Yt(t,n,r){let e=n[0],o=n[1],u=n[2];return t[0]=e*r[0]+o*r[3]+u*r[6],t[1]=e*r[1]+o*r[4]+u*r[7],t[2]=e*r[2]+o*r[5]+u*r[8],t}function kt(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[0],i=r[1],c=r[2],f=r[3],s=f*e+i*u-c*o,l=f*o+c*e-a*u,h=f*u+a*o-i*e,d=-a*e-i*o-c*u;return t[0]=s*f+d*-a+l*-c-h*-i,t[1]=l*f+d*-i+h*-a-s*-c,t[2]=h*f+d*-c+s*-i-l*-a,t}function Wt(t,n,r,e){let o=[],u=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],u[0]=o[0],u[1]=o[1]*Math.cos(e)-o[2]*Math.sin(e),u[2]=o[1]*Math.sin(e)+o[2]*Math.cos(e),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t}function jt(t,n,r,e){let o=[],u=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],u[0]=o[2]*Math.sin(e)+o[0]*Math.cos(e),u[1]=o[1],u[2]=o[2]*Math.cos(e)-o[0]*Math.sin(e),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t}function zt(t,n,r,e){let o=[],u=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],u[0]=o[0]*Math.cos(e)-o[1]*Math.sin(e),u[1]=o[0]*Math.sin(e)+o[1]*Math.cos(e),u[2]=o[2],t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t}function Kt(t,n){let r=pt(t[0],t[1],t[2]),e=pt(n[0],n[1],n[2]);Dt(r,r),Dt(e,e);let o=Ot(r,e);return o>1?0:o<-1?Math.PI:Math.acos(o)}function Ht(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Zt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Qt(t,n){let r=t[0],e=t[1],o=t[2],u=n[0],a=n[1],i=n[2];return Math.abs(r-u)<=_*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-a)<=_*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(o-i)<=_*Math.max(1,Math.abs(o),Math.abs(i))}const Jt=Tt,$t=vt,tn=yt,nn=Pt,rn=Bt,en=Mt,on=St,un=function(){let t=dt();return function(n,r,e,o,u,a){let i,c;for(r||(r=3),e||(e=0),c=o?Math.min(o*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],u(t,t,a),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}();function an(){let t=new b(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function cn(t){let n=new b(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function fn(t,n,r,e){let o=new b(4);return o[0]=t,o[1]=n,o[2]=r,o[3]=e,o}function sn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function ln(t,n,r,e,o){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t}function hn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function dn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function mn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function Mn(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function pn(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function En(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function _n(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t}function bn(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t}function Tn(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function vn(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function yn(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}function xn(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2],u=n[3]-t[3];return Math.sqrt(r*r+e*e+o*o+u*u)}function wn(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2],u=n[3]-t[3];return r*r+e*e+o*o+u*u}function An(t){let n=t[0],r=t[1],e=t[2],o=t[3];return Math.sqrt(n*n+r*r+e*e+o*o)}function gn(t){let n=t[0],r=t[1],e=t[2],o=t[3];return n*n+r*r+e*e+o*o}function Rn(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function Un(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function In(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=r*r+e*e+o*o+u*u;return a>0&&(a=1/Math.sqrt(a),t[0]=r*a,t[1]=e*a,t[2]=o*a,t[3]=u*a),t}function Pn(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function Bn(t,n,r,e){let o=n[0],u=n[1],a=n[2],i=n[3];return t[0]=o+e*(r[0]-o),t[1]=u+e*(r[1]-u),t[2]=a+e*(r[2]-a),t[3]=i+e*(r[3]-i),t}function Sn(t,n){return n=n||1,t[0]=T(),t[1]=T(),t[2]=T(),t[3]=T(),In(t,t),vn(t,t,n),t}function Cn(t,n,r){let e=n[0],o=n[1],u=n[2],a=n[3];return t[0]=r[0]*e+r[4]*o+r[8]*u+r[12]*a,t[1]=r[1]*e+r[5]*o+r[9]*u+r[13]*a,t[2]=r[2]*e+r[6]*o+r[10]*u+r[14]*a,t[3]=r[3]*e+r[7]*o+r[11]*u+r[15]*a,t}function Gn(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[0],i=r[1],c=r[2],f=r[3],s=f*e+i*u-c*o,l=f*o+c*e-a*u,h=f*u+a*o-i*e,d=-a*e-i*o-c*u;return t[0]=s*f+d*-a+l*-c-h*-i,t[1]=l*f+d*-i+h*-a-s*-c,t[2]=h*f+d*-c+s*-i-l*-a,t[3]=n[3],t}function Dn(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function On(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function Ln(t,n){let r=t[0],e=t[1],o=t[2],u=t[3],a=n[0],i=n[1],c=n[2],f=n[3];return Math.abs(r-a)<=_*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-i)<=_*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(o-c)<=_*Math.max(1,Math.abs(o),Math.abs(c))&&Math.abs(u-f)<=_*Math.max(1,Math.abs(u),Math.abs(f))}const Nn=dn,Fn=mn,Vn=Mn,Xn=xn,qn=wn,Yn=An,kn=gn,Wn=function(){let t=an();return function(n,r,e,o,u,a){let i,c;for(r||(r=4),e||(e=0),c=o?Math.min(o*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],u(t,t,a),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}();function jn(){let t=new b(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function zn(t,n,r,e){let o,u,a,i,c,f=n[0],s=n[1],l=n[2],h=n[3],d=r[0],m=r[1],M=r[2],p=r[3];return(u=f*d+s*m+l*M+h*p)<0&&(u=-u,d=-d,m=-m,M=-M,p=-p),1-u>1e-6?(o=Math.acos(u),a=Math.sin(o),i=Math.sin((1-e)*o)/a,c=Math.sin(e*o)/a):(i=1-e,c=e),t[0]=i*f+c*d,t[1]=i*s+c*m,t[2]=i*l+c*M,t[3]=i*h+c*p,t}const Kn=In;(function(){let t=dt(),n=pt(1,0,0),r=pt(0,1,0)})(),function(){let t=jn(),n=jn()}(),function(){let t=function(){let t=new b(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}()}();!function(){let t=function(){let t=new b(2);return t[0]=0,t[1]=0,t}()}();var Hn;!function(t){t[t.POSITION=0]="POSITION"}(Hn||(Hn={}));var Zn,Qn=function(){function t(){}return t.RIGHT=o.clone([1,0,0]),t.LEFT=o.clone([-1,0,0]),t.UP=o.clone([0,1,0]),t.DOWN=o.clone([0,-1,0]),t.FORWARD=o.clone([0,0,1]),t.BACKWARD=o.clone([0,0,-1]),t}(),Jn=(Zn=function(t,n){return(Zn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}Zn(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),$n=function(){function t(){this.transform=e.create()}return t.prototype.getInverseTransform=function(){var t=e.invert(e.create(),this.transform);if(!t)throw"Can't invert transform.";return t},t.prototype.getRight=function(){return o.clone([this.transform[0],this.transform[1],this.transform[2]])},t.prototype.getLeft=function(){return o.clone([-this.transform[0],-this.transform[1],-this.transform[2]])},t.prototype.getUp=function(){return o.clone([this.transform[4],this.transform[5],this.transform[6]])},t.prototype.getDown=function(){return o.clone([-this.transform[4],-this.transform[5],-this.transform[6]])},t.prototype.getForward=function(){return o.clone([this.transform[8],this.transform[9],this.transform[10]])},t.prototype.getBackward=function(){return o.clone([-this.transform[8],-this.transform[9],-this.transform[10]])},t.prototype.translate=function(t){e.translate(this.transform,this.transform,t)},t.prototype.rotateX=function(t){e.rotateX(this.transform,this.transform,t)},t.prototype.rotateY=function(t){e.rotateY(this.transform,this.transform,t)},t.prototype.rotateZ=function(t){e.rotateZ(this.transform,this.transform,t)},t.prototype.rotateAxis=function(t,n){e.rotate(this.transform,this.transform,t,n)},t}(),tr=function(t){function n(){return t.call(this)||this}return Jn(n,t),n.initVao=function(t){this.vao||(this.vao=function(t){var n=t.createVertexArray();if(!n)throw"Could not create vertex array object.";return n}(t),t.bindVertexArray(this.vao),this.indexBuffer||(this.indexBuffer=a(t)),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indexArray,t.STATIC_DRAW),this.positionBuffer||(this.positionBuffer=a(t)),t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer),t.bufferData(t.ARRAY_BUFFER,this.positionArray,t.STATIC_DRAW),t.vertexAttribPointer(Hn.POSITION,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),t.enableVertexAttribArray(Hn.POSITION))},n.mode=WebGL2RenderingContext.TRIANGLES,n.attribOptions={size:3,type:WebGL2RenderingContext.FLOAT,normalize:!1,stride:0,offset:0},n}(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.prototype.scale=function(t){"number"==typeof t?e.scale(this.transform,this.transform,[t,t,t]):e.scale(this.transform,this.transform,t)},n}($n)),nr=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.positionArray=new Float32Array([.5,.5,.5,-.5,.5,.5,.5,-.5,.5,-.5,-.5,.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),n.indexArray=new Uint16Array([1,0,3,2,6,0,4,1,5,3,7,6,5,4]),n.mode=WebGL2RenderingContext.TRIANGLE_STRIP,n}(tr),rr=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.indexArray=new Uint16Array([1,0,3,2,6,0,4,1,5,3,7,6,5,4]),n}(nr),er=(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}Jn(n,t),n.positionArray=new Float32Array([0,0,0,0,150,0,30,0,0,0,150,0,30,150,0,30,0,0,30,0,0,30,30,0,100,0,0,30,30,0,100,30,0,100,0,0,30,60,0,30,90,0,67,60,0,30,90,0,67,90,0,67,60,0,0,0,30,30,0,30,0,150,30,0,150,30,30,0,30,30,150,30,30,0,30,100,0,30,30,30,30,30,30,30,100,0,30,100,30,30,30,60,30,67,60,30,30,90,30,30,90,30,67,60,30,67,90,30,0,0,0,100,0,0,100,0,30,0,0,0,100,0,30,0,0,30,100,0,0,100,30,0,100,30,30,100,0,0,100,30,30,100,0,30,30,30,0,30,30,30,100,30,30,30,30,0,100,30,30,100,30,0,30,30,0,30,60,30,30,30,30,30,30,0,30,60,0,30,60,30,30,60,0,67,60,30,30,60,30,30,60,0,67,60,0,67,60,30,67,60,0,67,90,30,67,60,30,67,60,0,67,90,0,67,90,30,30,90,0,30,90,30,67,90,30,30,90,0,67,90,30,67,90,0,30,90,0,30,150,30,30,90,30,30,90,0,30,150,0,30,150,30,0,150,0,0,150,30,30,150,30,0,150,0,30,150,30,30,150,0,0,0,0,0,0,30,0,150,30,0,0,0,0,150,30,0,150,0]).map((function(t){return t/300})),n.indexArray=new Uint16Array(Array.from(Array(n.positionArray.length/3).keys()))}(tr),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}Jn(n,t),n.setGeometry=function(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,0,1,1,0]),t.STATIC_DRAW)}}(tr),function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}()),or=function(t){function n(n,r,o,u){var a=t.call(this)||this;return a.yFov=n,a.aspect=r,a.near=o,a.far=u,a.projection=e.perspective(e.create(),n,r,o,u),a.transformMemoizedValue=e.clone(a.transform),a.inverseTransformMemoizedValue=a.getInverseTransform(),a}return er(n,t),n.prototype.getDirection=function(){return this.getBackward()},n.prototype.getWorldToView=function(){return e.exactEquals(this.transform,this.transformMemoizedValue)||(this.transformMemoizedValue=e.clone(this.transform),this.inverseTransformMemoizedValue=this.getInverseTransform()),e.clone(this.inverseTransformMemoizedValue)},n.prototype.getSkyboxWorldToView=function(){var t=this.getWorldToView();return t[12]=0,t[13]=0,t[14]=0,t},n}($n);var ur=function(){function t(){}return t.drawFunction=function(t,n,r){return function(e,o){var u=e.constructor;u.initVao(o),o.useProgram(n),o.bindVertexArray(u.vao);var a=o.getUniformLocation(n,"u_modelToWorld"),i=o.getUniformLocation(n,"u_worldToView"),c=o.getUniformLocation(n,"u_viewToClip");o.uniformMatrix4fv(a,!1,e.transform),o.uniformMatrix4fv(i,!1,t.getWorldToView()),o.uniformMatrix4fv(c,!1,t.projection);var f=o.getUniformLocation(n,"u_color");o.uniform4fv(f,r),o.drawElements(u.mode,u.indexArray.length,o.UNSIGNED_SHORT,0)}},t.drawSkyboxFunction=function(t,n){return function(r,e){e.depthMask(!1);var o=r.constructor;o.initVao(e),e.useProgram(n),e.bindVertexArray(o.vao);var u=e.getUniformLocation(n,"u_worldToView"),a=e.getUniformLocation(n,"u_viewToClip");e.uniformMatrix4fv(u,!1,t.getSkyboxWorldToView()),e.uniformMatrix4fv(a,!1,t.projection),e.drawElements(o.mode,o.indexArray.length,e.UNSIGNED_SHORT,0),e.depthMask(!0)}},t}(),ar=r(0),ir=r.n(ar),cr=r(1),fr=r.n(cr),sr=r(2),lr=r.n(sr),hr=r(3),dr=r.n(hr),mr=r(4),Mr=r.n(mr),pr=r(5),Er=r.n(pr),_r=function(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,u=r.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(e=u.next()).done;)a.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return a},br=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(_r(arguments[n]));return t},Tr=function(){function t(){}return t.ROAD=u.clone([128,64,128,255].map((function(t){return t/255}))),t.SIDEWALK=u.clone([244,35,232,255].map((function(t){return t/255}))),t.BUILDING=u.clone([70,70,70,255].map((function(t){return t/255}))),t.CAR=u.clone([0,0,142,255].map((function(t){return t/255}))),t.VEGETATION=u.clone([107,142,35,255].map((function(t){return t/255}))),t.SKY=u.clone([70,130,180,255].map((function(t){return t/255}))),t}();function vr(t){t.clearColor(Tr.SKY[0],Tr.SKY[1],Tr.SKY[2],Tr.SKY[3]);var n=c(t,m,M),r=c(t,p,E),o=t.getUniformLocation(r,"u_skybox");t.uniform1i(o,0);var u=f(t),a=new or(Math.PI/2,u.width/u.height,.1,128);a.translate([0,4,0]),a.rotateX(-Math.PI/4);var i=function(t,n){var r=f(t),o=n.yFov*n.aspect/r.width,u=n.yFov/r.height;return new l(n,(function(t,n,r){var a=0,i=0;r.mouse.pressed&&0===r.mouse.button&&(a=r.mouse.movement.x*o,i=r.mouse.movement.y*u);t.rotateX(2*-i);var c=t.transform[12],f=t.transform[13],s=t.transform[14];t.transform[12]=0,t.transform[13]=0,t.transform[14]=0;var l=e.fromRotation(e.create(),2*-a,Qn.UP);e.multiply(t.transform,l,t.transform),t.transform[12]=c,t.transform[13]=f,t.transform[14]=s,r.keys.w&&t.translate([0,0,-n]),r.keys.a&&t.translate([-n,0,0]),r.keys.s&&t.translate([0,0,n]),r.keys.d&&t.translate([n,0,0])}))}(t,a),s=function(t,n,r,e,o,u,a){var i=ur.drawFunction(u,a,Tr.ROAD),c=ur.drawFunction(u,a,Tr.BUILDING),f=ur.drawFunction(u,a,Tr.SIDEWALK),s=t/2,l=t+r,d={x:0,z:0},m=l*e-r,M=l*o-r,p=-m/2,E=-M/2,_=[],b=new nr;b.scale([16*m,1,16*M]),b.translate([0,-.5,0]),_.push(new h(b,i));for(var T=0;T<e;T++)for(var v=0;v<o;v++){d.x=p+s+T*l,d.z=E+s+v*l;var y=new nr;y.translate([d.x,n/2,d.z]),y.scale([t,n,t]),_.push(new h(y,c))}for(T=0;T<e;T++)for(v=0;v<o;v++){d.x=p+s+T*l,d.z=E+s+v*l;var x=void 0,w=void 0;x=d.x+s+.125,w=d.z;var A=new nr;A.translate([x,.025,w]),A.scale([.25,.05,t+.5]),_.push(new h(A,f)),x=d.x-s-.125,w=d.z;var g=new nr;g.translate([x,.025,w]),g.scale([.25,.05,t+.5]),_.push(new h(g,f)),x=d.x,w=d.z+s+.125;var R=new nr;R.translate([x,.025,w]),R.scale([t,.05,.25]),_.push(new h(R,f)),x=d.x,w=d.z-s-.125;var U=new nr;U.translate([x,.025,w]),U.scale([t,.05,.25]),_.push(new h(U,f))}return _}(3,5,2,8,8,a,n),_=new nr,b=ur.drawFunction(a,n,Tr.VEGETATION),T=new rr,v=ur.drawSkyboxFunction(a,r),y=new h(T,v),x=new d(a,[i],br([new h(_,b)],s,[y])),w=function(t){var n=t.createTexture();if(!n)throw"Could not create texture.";return n}(t);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,0,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,0,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255])),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([255,255,255,255]));var A=new Image;A.src=ir.a,A.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,A)}));var g=new Image;g.src=fr.a,g.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_X,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,g)}));var R=new Image;R.src=lr.a,R.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,R)}));var U=new Image;U.src=dr.a,U.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Y,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,U)}));var I=new Image;I.src=Mr.a,I.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,I)}));var P=new Image;return P.src=Er.a,P.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,w),t.texImage2D(t.TEXTURE_CUBE_MAP_NEGATIVE_Z,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,P)})),x}var yr=function(t){var n="function"==typeof Symbol&&Symbol.iterator,r=n&&t[n],e=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")};function xr(t,n,r){var e=performance.now();requestAnimationFrame((function o(u){var a=.001*(u-e);r.mouse.movement.x=r.mouse.position.x-r.mouse.lastPosition.x,r.mouse.movement.y=r.mouse.position.y-r.mouse.lastPosition.y,function(t,n,r){var e,o;try{for(var u=yr(r.updatables),a=u.next();!a.done;a=u.next()){a.value.update(t,n)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(o=u.return)&&o.call(u)}finally{if(e)throw e.error}}}(a,r,n),function(t,n,r){var e,o;n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT);try{for(var u=yr(r.drawables),a=u.next();!a.done;a=u.next()){a.value.draw(n)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(o=u.return)&&o.call(u)}finally{if(e)throw e.error}}}(0,t,n),r.mouse.lastPosition.x=r.mouse.position.x,r.mouse.lastPosition.y=r.mouse.position.y,e=u,requestAnimationFrame(o)}))}document.addEventListener("DOMContentLoaded",(function(){!function(){var t=document.getElementById("canvas");t.focus();var n=function(t){var n={mouse:{pressed:!1,button:0,buttons:0,lastPosition:{x:0,y:0},position:{x:0,y:0},movement:{x:0,y:0}},keys:{w:!1,a:!1,s:!1,d:!1}};return t.addEventListener("mousedown",(function(t){n.mouse.pressed=!0,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mouseup",(function(t){n.mouse.pressed=!1,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mousemove",(function(t){n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mouseenter",(function(){t.focus()})),t.addEventListener("keydown",(function(t){n.keys[t.key]=!0})),t.addEventListener("keyup",(function(t){n.keys[t.key]=!1})),n}(t),r=function(t){var n=t.getContext("webgl2");if(!n)throw"Could not create context.";return n}(t);s(r),new window.ResizeObserver((function(){s(r)})).observe(t),r.enable(r.CULL_FACE),r.cullFace(r.BACK),r.enable(r.DEPTH_TEST),r.depthFunc(r.LEQUAL),r.clearColor(0,0,0,1);var e=vr(r);xr(r,e,n)}()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,