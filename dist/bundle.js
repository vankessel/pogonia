!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"create",(function(){return x})),r.d(e,"clone",(function(){return g})),r.d(e,"copy",(function(){return _})),r.d(e,"fromValues",(function(){return A})),r.d(e,"set",(function(){return T})),r.d(e,"identity",(function(){return S})),r.d(e,"transpose",(function(){return E})),r.d(e,"invert",(function(){return R})),r.d(e,"adjoint",(function(){return O})),r.d(e,"determinant",(function(){return P})),r.d(e,"multiply",(function(){return I})),r.d(e,"translate",(function(){return F})),r.d(e,"scale",(function(){return L})),r.d(e,"rotate",(function(){return q})),r.d(e,"rotateX",(function(){return C})),r.d(e,"rotateY",(function(){return V})),r.d(e,"rotateZ",(function(){return D})),r.d(e,"fromTranslation",(function(){return U})),r.d(e,"fromScaling",(function(){return B})),r.d(e,"fromRotation",(function(){return k})),r.d(e,"fromXRotation",(function(){return z})),r.d(e,"fromYRotation",(function(){return W})),r.d(e,"fromZRotation",(function(){return N})),r.d(e,"fromRotationTranslation",(function(){return Y})),r.d(e,"getTranslation",(function(){return j})),r.d(e,"getScaling",(function(){return G})),r.d(e,"getRotation",(function(){return X})),r.d(e,"fromRotationTranslationScale",(function(){return K})),r.d(e,"fromRotationTranslationScaleOrigin",(function(){return H})),r.d(e,"fromQuat",(function(){return Z})),r.d(e,"frustum",(function(){return Q})),r.d(e,"perspective",(function(){return J})),r.d(e,"perspectiveFromFieldOfView",(function(){return $})),r.d(e,"ortho",(function(){return tt})),r.d(e,"lookAt",(function(){return nt})),r.d(e,"targetTo",(function(){return rt})),r.d(e,"str",(function(){return et})),r.d(e,"frob",(function(){return ot})),r.d(e,"add",(function(){return ut})),r.d(e,"subtract",(function(){return at})),r.d(e,"multiplyScalar",(function(){return it})),r.d(e,"multiplyScalarAndAdd",(function(){return ct})),r.d(e,"exactEquals",(function(){return ft})),r.d(e,"equals",(function(){return st})),r.d(e,"mul",(function(){return ht})),r.d(e,"sub",(function(){return lt}));var o={};r.r(o),r.d(o,"create",(function(){return dt})),r.d(o,"clone",(function(){return mt})),r.d(o,"length",(function(){return Mt})),r.d(o,"fromValues",(function(){return pt})),r.d(o,"copy",(function(){return bt})),r.d(o,"set",(function(){return vt})),r.d(o,"add",(function(){return yt})),r.d(o,"subtract",(function(){return wt})),r.d(o,"multiply",(function(){return xt})),r.d(o,"divide",(function(){return gt})),r.d(o,"ceil",(function(){return _t})),r.d(o,"floor",(function(){return At})),r.d(o,"min",(function(){return Tt})),r.d(o,"max",(function(){return St})),r.d(o,"round",(function(){return Et})),r.d(o,"scale",(function(){return Rt})),r.d(o,"scaleAndAdd",(function(){return Ot})),r.d(o,"distance",(function(){return Pt})),r.d(o,"squaredDistance",(function(){return It})),r.d(o,"squaredLength",(function(){return Ft})),r.d(o,"negate",(function(){return Lt})),r.d(o,"inverse",(function(){return qt})),r.d(o,"normalize",(function(){return Ct})),r.d(o,"dot",(function(){return Vt})),r.d(o,"cross",(function(){return Dt})),r.d(o,"lerp",(function(){return Ut})),r.d(o,"hermite",(function(){return Bt})),r.d(o,"bezier",(function(){return kt})),r.d(o,"random",(function(){return zt})),r.d(o,"transformMat4",(function(){return Wt})),r.d(o,"transformMat3",(function(){return Nt})),r.d(o,"transformQuat",(function(){return Yt})),r.d(o,"rotateX",(function(){return jt})),r.d(o,"rotateY",(function(){return Gt})),r.d(o,"rotateZ",(function(){return Xt})),r.d(o,"angle",(function(){return Kt})),r.d(o,"str",(function(){return Ht})),r.d(o,"exactEquals",(function(){return Zt})),r.d(o,"equals",(function(){return Qt})),r.d(o,"sub",(function(){return Jt})),r.d(o,"mul",(function(){return $t})),r.d(o,"div",(function(){return tn})),r.d(o,"dist",(function(){return nn})),r.d(o,"sqrDist",(function(){return rn})),r.d(o,"len",(function(){return en})),r.d(o,"sqrLen",(function(){return on})),r.d(o,"forEach",(function(){return un}));var u={};function a(t){var n=t.createBuffer();if(!n)throw"Could not create positionBuffer.";return n}function i(t,n,r){var e=t.createShader(n);if(!e)throw"Could not create shader.";if(t.shaderSource(e,r),t.compileShader(e),!t.getShaderParameter(e,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(e)),t.deleteShader(e),"Could not create shader.";return e}function c(t,n,r){var e=i(t,t.VERTEX_SHADER,n),o=i(t,t.FRAGMENT_SHADER,r),u=t.createProgram();if(!u)throw"Could not create program.";if(t.attachShader(u,e),t.attachShader(u,o),t.linkProgram(u),!t.getProgramParameter(u,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(u)),t.deleteProgram(u),"Could not link program.";return u}function f(t){var n=t.getParameter(t.VIEWPORT);return{bounds:{left:n[0],bottom:n[1],right:n[2],top:n[3]},width:n[2]-n[0],height:n[3]-n[1]}}function s(t){var n=t.canvas;n.width===n.clientWidth&&n.height===n.clientHeight||(n.width=n.clientWidth,n.height=n.clientHeight,t.viewport(0,0,n.width,n.height))}r.r(u),r.d(u,"create",(function(){return an})),r.d(u,"clone",(function(){return cn})),r.d(u,"fromValues",(function(){return fn})),r.d(u,"copy",(function(){return sn})),r.d(u,"set",(function(){return hn})),r.d(u,"add",(function(){return ln})),r.d(u,"subtract",(function(){return dn})),r.d(u,"multiply",(function(){return mn})),r.d(u,"divide",(function(){return Mn})),r.d(u,"ceil",(function(){return pn})),r.d(u,"floor",(function(){return bn})),r.d(u,"min",(function(){return vn})),r.d(u,"max",(function(){return yn})),r.d(u,"round",(function(){return wn})),r.d(u,"scale",(function(){return xn})),r.d(u,"scaleAndAdd",(function(){return gn})),r.d(u,"distance",(function(){return _n})),r.d(u,"squaredDistance",(function(){return An})),r.d(u,"length",(function(){return Tn})),r.d(u,"squaredLength",(function(){return Sn})),r.d(u,"negate",(function(){return En})),r.d(u,"inverse",(function(){return Rn})),r.d(u,"normalize",(function(){return On})),r.d(u,"dot",(function(){return Pn})),r.d(u,"lerp",(function(){return In})),r.d(u,"random",(function(){return Fn})),r.d(u,"transformMat4",(function(){return Ln})),r.d(u,"transformQuat",(function(){return qn})),r.d(u,"str",(function(){return Cn})),r.d(u,"exactEquals",(function(){return Vn})),r.d(u,"equals",(function(){return Dn})),r.d(u,"sub",(function(){return Un})),r.d(u,"mul",(function(){return Bn})),r.d(u,"div",(function(){return kn})),r.d(u,"dist",(function(){return zn})),r.d(u,"sqrDist",(function(){return Wn})),r.d(u,"len",(function(){return Nn})),r.d(u,"sqrLen",(function(){return Yn})),r.d(u,"forEach",(function(){return jn}));var h=function(){function t(t,n){this.target=t,this.updateFunction=n}return t.prototype.update=function(t,n){this.updateFunction(this.target,t,n)},t}(),l=function(){function t(t,n){this.target=t,this.drawFunction=n}return t.prototype.draw=function(t){this.drawFunction(this.target,t)},t}(),d=function(t,n,r){void 0===n&&(n=[]),void 0===r&&(r=[]),this.camera=t,this.updatables=n,this.drawables=r},m="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_modelToWorld;\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nvoid main() {\n    gl_Position = u_viewToClip * u_worldToView * u_modelToWorld * a_position;\n}",M="#version 300 es\n\nprecision mediump float;\n\nuniform vec4 u_color;\n\nout vec4 o_color;\n\nvoid main() {\n    o_color = u_color;\n}",p="#version 300 es\n\nlayout (location = 0) in vec4 a_position;\n\nuniform mat4 u_worldToView;\nuniform mat4 u_viewToClip;\n\nout vec3 v_texCoord;\n\nvoid main()\n{\n    v_texCoord = a_position.xyz;\n\n    vec4 clipSpace = u_viewToClip * u_worldToView * a_position;\n    gl_Position = clipSpace.xyww;\n}",b="#version 300 es\n\nprecision mediump float;\n\nin vec3 v_texCoord;\n\nuniform samplerCube u_skybox;\n\nout vec4 o_color;\n\nvoid main()\n{\n    o_color = texture(u_skybox, v_texCoord);\n}";const v=1e-6;let y="undefined"!=typeof Float32Array?Float32Array:Array;const w=Math.random;Math.PI;function x(){let t=new y(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function g(t){let n=new y(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function _(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function A(t,n,r,e,o,u,a,i,c,f,s,h,l,d,m,M){let p=new y(16);return p[0]=t,p[1]=n,p[2]=r,p[3]=e,p[4]=o,p[5]=u,p[6]=a,p[7]=i,p[8]=c,p[9]=f,p[10]=s,p[11]=h,p[12]=l,p[13]=d,p[14]=m,p[15]=M,p}function T(t,n,r,e,o,u,a,i,c,f,s,h,l,d,m,M,p){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t[4]=u,t[5]=a,t[6]=i,t[7]=c,t[8]=f,t[9]=s,t[10]=h,t[11]=l,t[12]=d,t[13]=m,t[14]=M,t[15]=p,t}function S(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function E(t,n){if(t===n){let r=n[1],e=n[2],o=n[3],u=n[6],a=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=u,t[11]=n[14],t[12]=o,t[13]=a,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function R(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=n[4],i=n[5],c=n[6],f=n[7],s=n[8],h=n[9],l=n[10],d=n[11],m=n[12],M=n[13],p=n[14],b=n[15],v=r*i-e*a,y=r*c-o*a,w=r*f-u*a,x=e*c-o*i,g=e*f-u*i,_=o*f-u*c,A=s*M-h*m,T=s*p-l*m,S=s*b-d*m,E=h*p-l*M,R=h*b-d*M,O=l*b-d*p,P=v*O-y*R+w*E+x*S-g*T+_*A;return P?(P=1/P,t[0]=(i*O-c*R+f*E)*P,t[1]=(o*R-e*O-u*E)*P,t[2]=(M*_-p*g+b*x)*P,t[3]=(l*g-h*_-d*x)*P,t[4]=(c*S-a*O-f*T)*P,t[5]=(r*O-o*S+u*T)*P,t[6]=(p*w-m*_-b*y)*P,t[7]=(s*_-l*w+d*y)*P,t[8]=(a*R-i*S+f*A)*P,t[9]=(e*S-r*R-u*A)*P,t[10]=(m*g-M*w+b*v)*P,t[11]=(h*w-s*g-d*v)*P,t[12]=(i*T-a*E-c*A)*P,t[13]=(r*E-e*T+o*A)*P,t[14]=(M*y-m*x-p*v)*P,t[15]=(s*x-h*y+l*v)*P,t):null}function O(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=n[4],i=n[5],c=n[6],f=n[7],s=n[8],h=n[9],l=n[10],d=n[11],m=n[12],M=n[13],p=n[14],b=n[15];return t[0]=i*(l*b-d*p)-h*(c*b-f*p)+M*(c*d-f*l),t[1]=-(e*(l*b-d*p)-h*(o*b-u*p)+M*(o*d-u*l)),t[2]=e*(c*b-f*p)-i*(o*b-u*p)+M*(o*f-u*c),t[3]=-(e*(c*d-f*l)-i*(o*d-u*l)+h*(o*f-u*c)),t[4]=-(a*(l*b-d*p)-s*(c*b-f*p)+m*(c*d-f*l)),t[5]=r*(l*b-d*p)-s*(o*b-u*p)+m*(o*d-u*l),t[6]=-(r*(c*b-f*p)-a*(o*b-u*p)+m*(o*f-u*c)),t[7]=r*(c*d-f*l)-a*(o*d-u*l)+s*(o*f-u*c),t[8]=a*(h*b-d*M)-s*(i*b-f*M)+m*(i*d-f*h),t[9]=-(r*(h*b-d*M)-s*(e*b-u*M)+m*(e*d-u*h)),t[10]=r*(i*b-f*M)-a*(e*b-u*M)+m*(e*f-u*i),t[11]=-(r*(i*d-f*h)-a*(e*d-u*h)+s*(e*f-u*i)),t[12]=-(a*(h*p-l*M)-s*(i*p-c*M)+m*(i*l-c*h)),t[13]=r*(h*p-l*M)-s*(e*p-o*M)+m*(e*l-o*h),t[14]=-(r*(i*p-c*M)-a*(e*p-o*M)+m*(e*c-o*i)),t[15]=r*(i*l-c*h)-a*(e*l-o*h)+s*(e*c-o*i),t}function P(t){let n=t[0],r=t[1],e=t[2],o=t[3],u=t[4],a=t[5],i=t[6],c=t[7],f=t[8],s=t[9],h=t[10],l=t[11],d=t[12],m=t[13],M=t[14],p=t[15];return(n*a-r*u)*(h*p-l*M)-(n*i-e*u)*(s*p-l*m)+(n*c-o*u)*(s*M-h*m)+(r*i-e*a)*(f*p-l*d)-(r*c-o*a)*(f*M-h*d)+(e*c-o*i)*(f*m-s*d)}function I(t,n,r){let e=n[0],o=n[1],u=n[2],a=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],l=n[9],d=n[10],m=n[11],M=n[12],p=n[13],b=n[14],v=n[15],y=r[0],w=r[1],x=r[2],g=r[3];return t[0]=y*e+w*i+x*h+g*M,t[1]=y*o+w*c+x*l+g*p,t[2]=y*u+w*f+x*d+g*b,t[3]=y*a+w*s+x*m+g*v,y=r[4],w=r[5],x=r[6],g=r[7],t[4]=y*e+w*i+x*h+g*M,t[5]=y*o+w*c+x*l+g*p,t[6]=y*u+w*f+x*d+g*b,t[7]=y*a+w*s+x*m+g*v,y=r[8],w=r[9],x=r[10],g=r[11],t[8]=y*e+w*i+x*h+g*M,t[9]=y*o+w*c+x*l+g*p,t[10]=y*u+w*f+x*d+g*b,t[11]=y*a+w*s+x*m+g*v,y=r[12],w=r[13],x=r[14],g=r[15],t[12]=y*e+w*i+x*h+g*M,t[13]=y*o+w*c+x*l+g*p,t[14]=y*u+w*f+x*d+g*b,t[15]=y*a+w*s+x*m+g*v,t}function F(t,n,r){let e,o,u,a,i,c,f,s,h,l,d,m,M=r[0],p=r[1],b=r[2];return n===t?(t[12]=n[0]*M+n[4]*p+n[8]*b+n[12],t[13]=n[1]*M+n[5]*p+n[9]*b+n[13],t[14]=n[2]*M+n[6]*p+n[10]*b+n[14],t[15]=n[3]*M+n[7]*p+n[11]*b+n[15]):(e=n[0],o=n[1],u=n[2],a=n[3],i=n[4],c=n[5],f=n[6],s=n[7],h=n[8],l=n[9],d=n[10],m=n[11],t[0]=e,t[1]=o,t[2]=u,t[3]=a,t[4]=i,t[5]=c,t[6]=f,t[7]=s,t[8]=h,t[9]=l,t[10]=d,t[11]=m,t[12]=e*M+i*p+h*b+n[12],t[13]=o*M+c*p+l*b+n[13],t[14]=u*M+f*p+d*b+n[14],t[15]=a*M+s*p+m*b+n[15]),t}function L(t,n,r){let e=r[0],o=r[1],u=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=n[7]*o,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function q(t,n,r,e){let o,u,a,i,c,f,s,h,l,d,m,M,p,b,y,w,x,g,_,A,T,S,E,R,O=e[0],P=e[1],I=e[2],F=Math.sqrt(O*O+P*P+I*I);return Math.abs(F)<v?null:(O*=F=1/F,P*=F,I*=F,o=Math.sin(r),a=1-(u=Math.cos(r)),i=n[0],c=n[1],f=n[2],s=n[3],h=n[4],l=n[5],d=n[6],m=n[7],M=n[8],p=n[9],b=n[10],y=n[11],w=O*O*a+u,x=P*O*a+I*o,g=I*O*a-P*o,_=O*P*a-I*o,A=P*P*a+u,T=I*P*a+O*o,S=O*I*a+P*o,E=P*I*a-O*o,R=I*I*a+u,t[0]=i*w+h*x+M*g,t[1]=c*w+l*x+p*g,t[2]=f*w+d*x+b*g,t[3]=s*w+m*x+y*g,t[4]=i*_+h*A+M*T,t[5]=c*_+l*A+p*T,t[6]=f*_+d*A+b*T,t[7]=s*_+m*A+y*T,t[8]=i*S+h*E+M*R,t[9]=c*S+l*E+p*R,t[10]=f*S+d*E+b*R,t[11]=s*S+m*E+y*R,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function C(t,n,r){let e=Math.sin(r),o=Math.cos(r),u=n[4],a=n[5],i=n[6],c=n[7],f=n[8],s=n[9],h=n[10],l=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=u*o+f*e,t[5]=a*o+s*e,t[6]=i*o+h*e,t[7]=c*o+l*e,t[8]=f*o-u*e,t[9]=s*o-a*e,t[10]=h*o-i*e,t[11]=l*o-c*e,t}function V(t,n,r){let e=Math.sin(r),o=Math.cos(r),u=n[0],a=n[1],i=n[2],c=n[3],f=n[8],s=n[9],h=n[10],l=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*o-f*e,t[1]=a*o-s*e,t[2]=i*o-h*e,t[3]=c*o-l*e,t[8]=u*e+f*o,t[9]=a*e+s*o,t[10]=i*e+h*o,t[11]=c*e+l*o,t}function D(t,n,r){let e=Math.sin(r),o=Math.cos(r),u=n[0],a=n[1],i=n[2],c=n[3],f=n[4],s=n[5],h=n[6],l=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=u*o+f*e,t[1]=a*o+s*e,t[2]=i*o+h*e,t[3]=c*o+l*e,t[4]=f*o-u*e,t[5]=s*o-a*e,t[6]=h*o-i*e,t[7]=l*o-c*e,t}function U(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function B(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,n,r){let e,o,u,a=r[0],i=r[1],c=r[2],f=Math.sqrt(a*a+i*i+c*c);return Math.abs(f)<v?null:(a*=f=1/f,i*=f,c*=f,e=Math.sin(n),u=1-(o=Math.cos(n)),t[0]=a*a*u+o,t[1]=i*a*u+c*e,t[2]=c*a*u-i*e,t[3]=0,t[4]=a*i*u-c*e,t[5]=i*i*u+o,t[6]=c*i*u+a*e,t[7]=0,t[8]=a*c*u+i*e,t[9]=i*c*u-a*e,t[10]=c*c*u+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function z(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function W(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function N(t,n){let r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Y(t,n,r){let e=n[0],o=n[1],u=n[2],a=n[3],i=e+e,c=o+o,f=u+u,s=e*i,h=e*c,l=e*f,d=o*c,m=o*f,M=u*f,p=a*i,b=a*c,v=a*f;return t[0]=1-(d+M),t[1]=h+v,t[2]=l-b,t[3]=0,t[4]=h-v,t[5]=1-(s+M),t[6]=m+p,t[7]=0,t[8]=l+b,t[9]=m-p,t[10]=1-(s+d),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function j(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function G(t,n){let r=n[0],e=n[1],o=n[2],u=n[4],a=n[5],i=n[6],c=n[8],f=n[9],s=n[10];return t[0]=Math.sqrt(r*r+e*e+o*o),t[1]=Math.sqrt(u*u+a*a+i*i),t[2]=Math.sqrt(c*c+f*f+s*s),t}function X(t,n){let r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function K(t,n,r,e){let o=n[0],u=n[1],a=n[2],i=n[3],c=o+o,f=u+u,s=a+a,h=o*c,l=o*f,d=o*s,m=u*f,M=u*s,p=a*s,b=i*c,v=i*f,y=i*s,w=e[0],x=e[1],g=e[2];return t[0]=(1-(m+p))*w,t[1]=(l+y)*w,t[2]=(d-v)*w,t[3]=0,t[4]=(l-y)*x,t[5]=(1-(h+p))*x,t[6]=(M+b)*x,t[7]=0,t[8]=(d+v)*g,t[9]=(M-b)*g,t[10]=(1-(h+m))*g,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function H(t,n,r,e,o){let u=n[0],a=n[1],i=n[2],c=n[3],f=u+u,s=a+a,h=i+i,l=u*f,d=u*s,m=u*h,M=a*s,p=a*h,b=i*h,v=c*f,y=c*s,w=c*h,x=e[0],g=e[1],_=e[2],A=o[0],T=o[1],S=o[2],E=(1-(M+b))*x,R=(d+w)*x,O=(m-y)*x,P=(d-w)*g,I=(1-(l+b))*g,F=(p+v)*g,L=(m+y)*_,q=(p-v)*_,C=(1-(l+M))*_;return t[0]=E,t[1]=R,t[2]=O,t[3]=0,t[4]=P,t[5]=I,t[6]=F,t[7]=0,t[8]=L,t[9]=q,t[10]=C,t[11]=0,t[12]=r[0]+A-(E*A+P*T+L*S),t[13]=r[1]+T-(R*A+I*T+q*S),t[14]=r[2]+S-(O*A+F*T+C*S),t[15]=1,t}function Z(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=r+r,i=e+e,c=o+o,f=r*a,s=e*a,h=e*i,l=o*a,d=o*i,m=o*c,M=u*a,p=u*i,b=u*c;return t[0]=1-h-m,t[1]=s+b,t[2]=l-p,t[3]=0,t[4]=s-b,t[5]=1-f-m,t[6]=d+M,t[7]=0,t[8]=l+p,t[9]=d-M,t[10]=1-f-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Q(t,n,r,e,o,u,a){let i=1/(r-n),c=1/(o-e),f=1/(u-a);return t[0]=2*u*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*c,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(o+e)*c,t[10]=(a+u)*f,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*u*2*f,t[15]=0,t}function J(t,n,r,e,o){let u=1/Math.tan(n/2),a=1/(e-o);return t[0]=u/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(o+e)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*o*e*a,t[15]=0,t}function $(t,n,r,e){let o=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),a=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),c=2/(a+i),f=2/(o+u);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=f,t[6]=0,t[7]=0,t[8]=-(a-i)*c*.5,t[9]=(o-u)*f*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function tt(t,n,r,e,o,u,a){let i=1/(n-r),c=1/(e-o),f=1/(u-a);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*f,t[11]=0,t[12]=(n+r)*i,t[13]=(o+e)*c,t[14]=(a+u)*f,t[15]=1,t}function nt(t,n,r,e){let o,u,a,i,c,f,s,h,l,d,m=n[0],M=n[1],p=n[2],b=e[0],y=e[1],w=e[2],x=r[0],g=r[1],_=r[2];return Math.abs(m-x)<v&&Math.abs(M-g)<v&&Math.abs(p-_)<v?S(t):(s=m-x,h=M-g,l=p-_,o=y*(l*=d=1/Math.sqrt(s*s+h*h+l*l))-w*(h*=d),u=w*(s*=d)-b*l,a=b*h-y*s,(d=Math.sqrt(o*o+u*u+a*a))?(o*=d=1/d,u*=d,a*=d):(o=0,u=0,a=0),i=h*a-l*u,c=l*o-s*a,f=s*u-h*o,(d=Math.sqrt(i*i+c*c+f*f))?(i*=d=1/d,c*=d,f*=d):(i=0,c=0,f=0),t[0]=o,t[1]=i,t[2]=s,t[3]=0,t[4]=u,t[5]=c,t[6]=h,t[7]=0,t[8]=a,t[9]=f,t[10]=l,t[11]=0,t[12]=-(o*m+u*M+a*p),t[13]=-(i*m+c*M+f*p),t[14]=-(s*m+h*M+l*p),t[15]=1,t)}function rt(t,n,r,e){let o=n[0],u=n[1],a=n[2],i=e[0],c=e[1],f=e[2],s=o-r[0],h=u-r[1],l=a-r[2],d=s*s+h*h+l*l;d>0&&(s*=d=1/Math.sqrt(d),h*=d,l*=d);let m=c*l-f*h,M=f*s-i*l,p=i*h-c*s;return(d=m*m+M*M+p*p)>0&&(m*=d=1/Math.sqrt(d),M*=d,p*=d),t[0]=m,t[1]=M,t[2]=p,t[3]=0,t[4]=h*p-l*M,t[5]=l*m-s*p,t[6]=s*M-h*m,t[7]=0,t[8]=s,t[9]=h,t[10]=l,t[11]=0,t[12]=o,t[13]=u,t[14]=a,t[15]=1,t}function et(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function ot(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function ut(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function at(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function it(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function ct(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function ft(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function st(t,n){let r=t[0],e=t[1],o=t[2],u=t[3],a=t[4],i=t[5],c=t[6],f=t[7],s=t[8],h=t[9],l=t[10],d=t[11],m=t[12],M=t[13],p=t[14],b=t[15],y=n[0],w=n[1],x=n[2],g=n[3],_=n[4],A=n[5],T=n[6],S=n[7],E=n[8],R=n[9],O=n[10],P=n[11],I=n[12],F=n[13],L=n[14],q=n[15];return Math.abs(r-y)<=v*Math.max(1,Math.abs(r),Math.abs(y))&&Math.abs(e-w)<=v*Math.max(1,Math.abs(e),Math.abs(w))&&Math.abs(o-x)<=v*Math.max(1,Math.abs(o),Math.abs(x))&&Math.abs(u-g)<=v*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(a-_)<=v*Math.max(1,Math.abs(a),Math.abs(_))&&Math.abs(i-A)<=v*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(c-T)<=v*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(f-S)<=v*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(s-E)<=v*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(h-R)<=v*Math.max(1,Math.abs(h),Math.abs(R))&&Math.abs(l-O)<=v*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(d-P)<=v*Math.max(1,Math.abs(d),Math.abs(P))&&Math.abs(m-I)<=v*Math.max(1,Math.abs(m),Math.abs(I))&&Math.abs(M-F)<=v*Math.max(1,Math.abs(M),Math.abs(F))&&Math.abs(p-L)<=v*Math.max(1,Math.abs(p),Math.abs(L))&&Math.abs(b-q)<=v*Math.max(1,Math.abs(b),Math.abs(q))}const ht=I,lt=at;function dt(){let t=new y(3);return t[0]=0,t[1]=0,t[2]=0,t}function mt(t){var n=new y(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function Mt(t){let n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function pt(t,n,r){let e=new y(3);return e[0]=t,e[1]=n,e[2]=r,e}function bt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function vt(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function yt(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function wt(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function xt(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function gt(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function _t(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function At(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function Tt(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function St(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function Et(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function Rt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function Ot(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function Pt(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return Math.sqrt(r*r+e*e+o*o)}function It(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2];return r*r+e*e+o*o}function Ft(t){let n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function Lt(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function qt(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function Ct(t,n){let r=n[0],e=n[1],o=n[2],u=r*r+e*e+o*o;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u),t}function Vt(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Dt(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[0],i=r[1],c=r[2];return t[0]=o*c-u*i,t[1]=u*a-e*c,t[2]=e*i-o*a,t}function Ut(t,n,r,e){let o=n[0],u=n[1],a=n[2];return t[0]=o+e*(r[0]-o),t[1]=u+e*(r[1]-u),t[2]=a+e*(r[2]-a),t}function Bt(t,n,r,e,o,u){let a=u*u,i=a*(2*u-3)+1,c=a*(u-2)+u,f=a*(u-1),s=a*(3-2*u);return t[0]=n[0]*i+r[0]*c+e[0]*f+o[0]*s,t[1]=n[1]*i+r[1]*c+e[1]*f+o[1]*s,t[2]=n[2]*i+r[2]*c+e[2]*f+o[2]*s,t}function kt(t,n,r,e,o,u){let a=1-u,i=a*a,c=u*u,f=i*a,s=3*u*i,h=3*c*a,l=c*u;return t[0]=n[0]*f+r[0]*s+e[0]*h+o[0]*l,t[1]=n[1]*f+r[1]*s+e[1]*h+o[1]*l,t[2]=n[2]*f+r[2]*s+e[2]*h+o[2]*l,t}function zt(t,n){n=n||1;let r=2*w()*Math.PI,e=2*w()-1,o=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*o,t[1]=Math.sin(r)*o,t[2]=e*n,t}function Wt(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[3]*e+r[7]*o+r[11]*u+r[15];return a=a||1,t[0]=(r[0]*e+r[4]*o+r[8]*u+r[12])/a,t[1]=(r[1]*e+r[5]*o+r[9]*u+r[13])/a,t[2]=(r[2]*e+r[6]*o+r[10]*u+r[14])/a,t}function Nt(t,n,r){let e=n[0],o=n[1],u=n[2];return t[0]=e*r[0]+o*r[3]+u*r[6],t[1]=e*r[1]+o*r[4]+u*r[7],t[2]=e*r[2]+o*r[5]+u*r[8],t}function Yt(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[0],i=r[1],c=r[2],f=r[3],s=f*e+i*u-c*o,h=f*o+c*e-a*u,l=f*u+a*o-i*e,d=-a*e-i*o-c*u;return t[0]=s*f+d*-a+h*-c-l*-i,t[1]=h*f+d*-i+l*-a-s*-c,t[2]=l*f+d*-c+s*-i-h*-a,t}function jt(t,n,r,e){let o=[],u=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],u[0]=o[0],u[1]=o[1]*Math.cos(e)-o[2]*Math.sin(e),u[2]=o[1]*Math.sin(e)+o[2]*Math.cos(e),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t}function Gt(t,n,r,e){let o=[],u=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],u[0]=o[2]*Math.sin(e)+o[0]*Math.cos(e),u[1]=o[1],u[2]=o[2]*Math.cos(e)-o[0]*Math.sin(e),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t}function Xt(t,n,r,e){let o=[],u=[];return o[0]=n[0]-r[0],o[1]=n[1]-r[1],o[2]=n[2]-r[2],u[0]=o[0]*Math.cos(e)-o[1]*Math.sin(e),u[1]=o[0]*Math.sin(e)+o[1]*Math.cos(e),u[2]=o[2],t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t}function Kt(t,n){let r=pt(t[0],t[1],t[2]),e=pt(n[0],n[1],n[2]);Ct(r,r),Ct(e,e);let o=Vt(r,e);return o>1?0:o<-1?Math.PI:Math.acos(o)}function Ht(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Zt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Qt(t,n){let r=t[0],e=t[1],o=t[2],u=n[0],a=n[1],i=n[2];return Math.abs(r-u)<=v*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-a)<=v*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(o-i)<=v*Math.max(1,Math.abs(o),Math.abs(i))}const Jt=wt,$t=xt,tn=gt,nn=Pt,rn=It,en=Mt,on=Ft,un=function(){let t=dt();return function(n,r,e,o,u,a){let i,c;for(r||(r=3),e||(e=0),c=o?Math.min(o*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],u(t,t,a),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}();function an(){let t=new y(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function cn(t){let n=new y(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function fn(t,n,r,e){let o=new y(4);return o[0]=t,o[1]=n,o[2]=r,o[3]=e,o}function sn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function hn(t,n,r,e,o){return t[0]=n,t[1]=r,t[2]=e,t[3]=o,t}function ln(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function dn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function mn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function Mn(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function pn(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function bn(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function vn(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t}function yn(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t}function wn(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function xn(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function gn(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}function _n(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2],u=n[3]-t[3];return Math.sqrt(r*r+e*e+o*o+u*u)}function An(t,n){let r=n[0]-t[0],e=n[1]-t[1],o=n[2]-t[2],u=n[3]-t[3];return r*r+e*e+o*o+u*u}function Tn(t){let n=t[0],r=t[1],e=t[2],o=t[3];return Math.sqrt(n*n+r*r+e*e+o*o)}function Sn(t){let n=t[0],r=t[1],e=t[2],o=t[3];return n*n+r*r+e*e+o*o}function En(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function Rn(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function On(t,n){let r=n[0],e=n[1],o=n[2],u=n[3],a=r*r+e*e+o*o+u*u;return a>0&&(a=1/Math.sqrt(a),t[0]=r*a,t[1]=e*a,t[2]=o*a,t[3]=u*a),t}function Pn(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function In(t,n,r,e){let o=n[0],u=n[1],a=n[2],i=n[3];return t[0]=o+e*(r[0]-o),t[1]=u+e*(r[1]-u),t[2]=a+e*(r[2]-a),t[3]=i+e*(r[3]-i),t}function Fn(t,n){return n=n||1,t[0]=w(),t[1]=w(),t[2]=w(),t[3]=w(),On(t,t),xn(t,t,n),t}function Ln(t,n,r){let e=n[0],o=n[1],u=n[2],a=n[3];return t[0]=r[0]*e+r[4]*o+r[8]*u+r[12]*a,t[1]=r[1]*e+r[5]*o+r[9]*u+r[13]*a,t[2]=r[2]*e+r[6]*o+r[10]*u+r[14]*a,t[3]=r[3]*e+r[7]*o+r[11]*u+r[15]*a,t}function qn(t,n,r){let e=n[0],o=n[1],u=n[2],a=r[0],i=r[1],c=r[2],f=r[3],s=f*e+i*u-c*o,h=f*o+c*e-a*u,l=f*u+a*o-i*e,d=-a*e-i*o-c*u;return t[0]=s*f+d*-a+h*-c-l*-i,t[1]=h*f+d*-i+l*-a-s*-c,t[2]=l*f+d*-c+s*-i-h*-a,t[3]=n[3],t}function Cn(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function Vn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function Dn(t,n){let r=t[0],e=t[1],o=t[2],u=t[3],a=n[0],i=n[1],c=n[2],f=n[3];return Math.abs(r-a)<=v*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-i)<=v*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(o-c)<=v*Math.max(1,Math.abs(o),Math.abs(c))&&Math.abs(u-f)<=v*Math.max(1,Math.abs(u),Math.abs(f))}const Un=dn,Bn=mn,kn=Mn,zn=_n,Wn=An,Nn=Tn,Yn=Sn,jn=function(){let t=an();return function(n,r,e,o,u,a){let i,c;for(r||(r=4),e||(e=0),c=o?Math.min(o*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],u(t,t,a),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}();function Gn(){let t=new y(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Xn(t,n,r,e){let o,u,a,i,c,f=n[0],s=n[1],h=n[2],l=n[3],d=r[0],m=r[1],M=r[2],p=r[3];return(u=f*d+s*m+h*M+l*p)<0&&(u=-u,d=-d,m=-m,M=-M,p=-p),1-u>1e-6?(o=Math.acos(u),a=Math.sin(o),i=Math.sin((1-e)*o)/a,c=Math.sin(e*o)/a):(i=1-e,c=e),t[0]=i*f+c*d,t[1]=i*s+c*m,t[2]=i*h+c*M,t[3]=i*l+c*p,t}const Kn=On;(function(){let t=dt(),n=pt(1,0,0),r=pt(0,1,0)})(),function(){let t=Gn(),n=Gn()}(),function(){let t=function(){let t=new y(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}()}();!function(){let t=function(){let t=new y(2);return t[0]=0,t[1]=0,t}()}();var Hn;!function(t){t[t.POSITION=0]="POSITION"}(Hn||(Hn={}));var Zn,Qn=function(){function t(){}return t.RIGHT=o.clone([1,0,0]),t.LEFT=o.clone([-1,0,0]),t.UP=o.clone([0,1,0]),t.DOWN=o.clone([0,-1,0]),t.FORWARD=o.clone([0,0,1]),t.BACKWARD=o.clone([0,0,-1]),t}(),Jn=(Zn=function(t,n){return(Zn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}Zn(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),$n=function(){function t(){this.transform=e.create()}return t.prototype.getInverseTransform=function(){var t=e.invert(e.create(),this.transform);if(!t)throw"Can't invert transform.";return t},t.prototype.getRight=function(){return o.clone([this.transform[0],this.transform[1],this.transform[2]])},t.prototype.getLeft=function(){return o.clone([-this.transform[0],-this.transform[1],-this.transform[2]])},t.prototype.getUp=function(){return o.clone([this.transform[4],this.transform[5],this.transform[6]])},t.prototype.getDown=function(){return o.clone([-this.transform[4],-this.transform[5],-this.transform[6]])},t.prototype.getForward=function(){return o.clone([this.transform[8],this.transform[9],this.transform[10]])},t.prototype.getBackward=function(){return o.clone([-this.transform[8],-this.transform[9],-this.transform[10]])},t.prototype.translate=function(t){e.translate(this.transform,this.transform,t)},t.prototype.rotateX=function(t){e.rotateX(this.transform,this.transform,t)},t.prototype.rotateY=function(t){e.rotateY(this.transform,this.transform,t)},t.prototype.rotateZ=function(t){e.rotateZ(this.transform,this.transform,t)},t.prototype.rotateAxis=function(t,n){e.rotate(this.transform,this.transform,t,n)},t}(),tr=function(t){function n(){return t.call(this)||this}return Jn(n,t),n.initVao=function(t){this.vao||(this.vao=function(t){var n=t.createVertexArray();if(!n)throw"Could not create vertex array object.";return n}(t),t.bindVertexArray(this.vao),this.indexBuffer||(this.indexBuffer=a(t)),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indexArray,t.STATIC_DRAW),this.positionBuffer||(this.positionBuffer=a(t)),t.bindBuffer(t.ARRAY_BUFFER,this.positionBuffer),t.bufferData(t.ARRAY_BUFFER,this.positionArray,t.STATIC_DRAW),t.vertexAttribPointer(Hn.POSITION,this.attribOptions.size,this.attribOptions.type,this.attribOptions.normalize,this.attribOptions.stride,this.attribOptions.offset),t.enableVertexAttribArray(Hn.POSITION))},n.mode=WebGL2RenderingContext.TRIANGLES,n.attribOptions={size:3,type:WebGL2RenderingContext.FLOAT,normalize:!1,stride:0,offset:0},n}(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.prototype.scale=function(t){"number"==typeof t?e.scale(this.transform,this.transform,[t,t,t]):e.scale(this.transform,this.transform,t)},n}($n)),nr=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Jn(n,t),n.positionArray=new Float32Array([.5,.5,.5,-.5,.5,.5,.5,-.5,.5,-.5,-.5,.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),n.indexArray=new Uint16Array([1,0,3,2,6,0,4,1,5,3,7,6,5,4]),n.mode=WebGL2RenderingContext.TRIANGLE_STRIP,n}(tr),rr=(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}Jn(n,t),n.indexArray=new Uint16Array([1,0,3,2,6,0,4,1,5,3,7,6,5,4])}(nr),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}Jn(n,t),n.positionArray=new Float32Array([0,0,0,0,150,0,30,0,0,0,150,0,30,150,0,30,0,0,30,0,0,30,30,0,100,0,0,30,30,0,100,30,0,100,0,0,30,60,0,30,90,0,67,60,0,30,90,0,67,90,0,67,60,0,0,0,30,30,0,30,0,150,30,0,150,30,30,0,30,30,150,30,30,0,30,100,0,30,30,30,30,30,30,30,100,0,30,100,30,30,30,60,30,67,60,30,30,90,30,30,90,30,67,60,30,67,90,30,0,0,0,100,0,0,100,0,30,0,0,0,100,0,30,0,0,30,100,0,0,100,30,0,100,30,30,100,0,0,100,30,30,100,0,30,30,30,0,30,30,30,100,30,30,30,30,0,100,30,30,100,30,0,30,30,0,30,60,30,30,30,30,30,30,0,30,60,0,30,60,30,30,60,0,67,60,30,30,60,30,30,60,0,67,60,0,67,60,30,67,60,0,67,90,30,67,60,30,67,60,0,67,90,0,67,90,30,30,90,0,30,90,30,67,90,30,30,90,0,67,90,30,67,90,0,30,90,0,30,150,30,30,90,30,30,90,0,30,150,0,30,150,30,0,150,0,0,150,30,30,150,30,0,150,0,30,150,30,30,150,0,0,0,0,0,0,30,0,150,30,0,0,0,0,150,30,0,150,0]).map((function(t){return t/300})),n.indexArray=new Uint16Array(Array.from(Array(n.positionArray.length/3).keys()))}(tr),function(t){function n(){return null!==t&&t.apply(this,arguments)||this}Jn(n,t),n.setGeometry=function(t){t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,0,1,1,0]),t.STATIC_DRAW)}}(tr),function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}()),er=function(t){function n(n,r,o,u){var a=t.call(this)||this;return a.yFov=n,a.aspect=r,a.near=o,a.far=u,a.projection=e.perspective(e.create(),n,r,o,u),a.transformMemoizedValue=e.clone(a.transform),a.inverseTransformMemoizedValue=a.getInverseTransform(),a}return rr(n,t),n.prototype.getDirection=function(){return this.getBackward()},n.prototype.getWorldToView=function(){return e.exactEquals(this.transform,this.transformMemoizedValue)||(this.transformMemoizedValue=e.clone(this.transform),this.inverseTransformMemoizedValue=this.getInverseTransform()),e.clone(this.inverseTransformMemoizedValue)},n.prototype.getSkyboxWorldToView=function(){var t=this.getWorldToView();return t[12]=0,t[13]=0,t[14]=0,t},n}($n);var or=function(){function t(){}return t.drawFunction=function(t,n,r){return function(e,o){var u=e.constructor;u.initVao(o),o.useProgram(n),o.bindVertexArray(u.vao);var a=o.getUniformLocation(n,"u_modelToWorld"),i=o.getUniformLocation(n,"u_worldToView"),c=o.getUniformLocation(n,"u_viewToClip");o.uniformMatrix4fv(a,!1,e.transform),o.uniformMatrix4fv(i,!1,t.getWorldToView()),o.uniformMatrix4fv(c,!1,t.projection);var f=o.getUniformLocation(n,"u_color");o.uniform4fv(f,r),o.drawElements(u.mode,u.indexArray.length,o.UNSIGNED_SHORT,0)}},t.drawSkyboxFunction=function(t,n){return function(r,e){e.depthMask(!1);var o=r.constructor;o.initVao(e),e.useProgram(n),e.bindVertexArray(o.vao);var u=e.getUniformLocation(n,"u_worldToView"),a=e.getUniformLocation(n,"u_viewToClip");e.uniformMatrix4fv(u,!1,t.getSkyboxWorldToView()),e.uniformMatrix4fv(a,!1,t.projection),e.drawElements(o.mode,o.indexArray.length,e.UNSIGNED_SHORT,0),e.depthMask(!0)}},t}(),ur=function(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var e,o,u=r.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(e=u.next()).done;)a.push(e.value)}catch(t){o={error:t}}finally{try{e&&!e.done&&(r=u.return)&&r.call(u)}finally{if(o)throw o.error}}return a},ar=function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(ur(arguments[n]));return t},ir=function(){function t(){}return t.ROAD=u.clone([128,64,128,255].map((function(t){return t/255}))),t.SIDEWALK=u.clone([244,35,232,255].map((function(t){return t/255}))),t.BUILDING=u.clone([70,70,70,255].map((function(t){return t/255}))),t.CAR=u.clone([0,0,142,255].map((function(t){return t/255}))),t.VEGETATION=u.clone([107,142,35,255].map((function(t){return t/255}))),t.SKY=u.clone([70,130,180,255].map((function(t){return t/255}))),t}();function cr(t){t.clearColor(ir.SKY[0],ir.SKY[1],ir.SKY[2],ir.SKY[3]);var n=c(t,m,M),r=c(t,p,b),o=t.getUniformLocation(r,"u_skybox");t.uniform1i(o,0);var u=f(t),a=new er(Math.PI/2,u.width/u.height,.1,128);a.translate([0,4,0]),a.rotateX(-Math.PI/4);var i=function(t,n){var r=f(t),o=n.yFov*n.aspect/r.width,u=n.yFov/r.height;return new h(n,(function(t,n,r){var a=0,i=0;r.mouse.pressed&&0===r.mouse.button&&(a=r.mouse.movement.x*o,i=r.mouse.movement.y*u);t.rotateX(2*-i);var c=t.transform[12],f=t.transform[13],s=t.transform[14];t.transform[12]=0,t.transform[13]=0,t.transform[14]=0;var h=e.fromRotation(e.create(),2*-a,Qn.UP);e.multiply(t.transform,h,t.transform),t.transform[12]=c,t.transform[13]=f,t.transform[14]=s,r.keys.w&&t.translate([0,0,-n]),r.keys.a&&t.translate([-n,0,0]),r.keys.s&&t.translate([0,0,n]),r.keys.d&&t.translate([n,0,0])}))}(t,a),s=function(t,n,r,e,o,u,a){var i=or.drawFunction(u,a,ir.ROAD),c=or.drawFunction(u,a,ir.BUILDING),f=or.drawFunction(u,a,ir.SIDEWALK),s=t/2,h=t+r,d={x:0,z:0},m=h*e-r,M=h*o-r,p=-m/2,b=-M/2,v=[],y=new nr;y.scale([16*m,1,16*M]),y.translate([0,-.5,0]),v.push(new l(y,i));for(var w=0;w<e;w++)for(var x=0;x<o;x++){d.x=p+s+w*h,d.z=b+s+x*h;var g=new nr;g.translate([d.x,n/2,d.z]),g.scale([t,n,t]),v.push(new l(g,c))}for(w=0;w<e;w++)for(x=0;x<o;x++){d.x=p+s+w*h,d.z=b+s+x*h;var _=void 0,A=void 0;_=d.x+s+.125,A=d.z;var T=new nr;T.translate([_,.025,A]),T.scale([.25,.05,t+.5]),v.push(new l(T,f)),_=d.x-s-.125,A=d.z;var S=new nr;S.translate([_,.025,A]),S.scale([.25,.05,t+.5]),v.push(new l(S,f)),_=d.x,A=d.z+s+.125;var E=new nr;E.translate([_,.025,A]),E.scale([t,.05,.25]),v.push(new l(E,f)),_=d.x,A=d.z-s-.125;var R=new nr;R.translate([_,.025,A]),R.scale([t,.05,.25]),v.push(new l(R,f))}return v}(3,5,2,8,8,a,n),v=new nr,y=or.drawFunction(a,n,ir.VEGETATION);return new d(a,[i],ar([new l(v,y)],s))}var fr=function(t){var n="function"==typeof Symbol&&Symbol.iterator,r=n&&t[n],e=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")};function sr(t,n,r){var e=performance.now();requestAnimationFrame((function o(u){var a=.001*(u-e);r.mouse.movement.x=r.mouse.position.x-r.mouse.lastPosition.x,r.mouse.movement.y=r.mouse.position.y-r.mouse.lastPosition.y,function(t,n,r){var e,o;try{for(var u=fr(r.updatables),a=u.next();!a.done;a=u.next()){a.value.update(t,n)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(o=u.return)&&o.call(u)}finally{if(e)throw e.error}}}(a,r,n),function(t,n,r){var e,o;n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT);try{for(var u=fr(r.drawables),a=u.next();!a.done;a=u.next()){a.value.draw(n)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(o=u.return)&&o.call(u)}finally{if(e)throw e.error}}}(0,t,n),r.mouse.lastPosition.x=r.mouse.position.x,r.mouse.lastPosition.y=r.mouse.position.y,e=u,requestAnimationFrame(o)}))}document.addEventListener("DOMContentLoaded",(function(){!function(){var t=document.getElementById("canvas");t.focus();var n=function(t){var n={mouse:{pressed:!1,button:0,buttons:0,lastPosition:{x:0,y:0},position:{x:0,y:0},movement:{x:0,y:0}},keys:{w:!1,a:!1,s:!1,d:!1}};return t.addEventListener("mousedown",(function(t){n.mouse.pressed=!0,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mouseup",(function(t){n.mouse.pressed=!1,n.mouse.button=t.button,n.mouse.buttons=t.buttons,n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mousemove",(function(t){n.mouse.position.x=t.offsetX,n.mouse.position.y=t.offsetY})),t.addEventListener("mouseenter",(function(){t.focus()})),t.addEventListener("keydown",(function(t){n.keys[t.key]=!0})),t.addEventListener("keyup",(function(t){n.keys[t.key]=!1})),n}(t),r=function(t){var n=t.getContext("webgl2");if(!n)throw"Could not create context.";return n}(t);s(r),new window.ResizeObserver((function(){s(r)})).observe(t),r.enable(r.CULL_FACE),r.cullFace(r.BACK),r.enable(r.DEPTH_TEST),r.depthFunc(r.LEQUAL),r.clearColor(0,0,0,1);var e=cr(r);sr(r,e,n)}()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,